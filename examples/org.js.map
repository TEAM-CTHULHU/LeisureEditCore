{
  "version": 3,
  "file": "org.js",
  "sourceRoot": "",
  "sources": [
    "org.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nCopyright (C) 2013, 2021, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure\n\n(licensed with ZLIB license)\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n###\n\n#\n# Parse orgmode files\n#\n#\n\n# alText() gets its text, plus its childrens'\n#\n\nimport {Lazy} from './lazy.js'\n\n_ = Lazy\n\ntodoKeywords = ['TODO', 'DONE']\n\ndeclRE = /^#\\+.*$/m\nbuildHeadlineRE = ->\n  new RegExp \"^(\\\\*+( +|$))((?:#{todoKeywords.join('|')}) *)?(\\\\[#(A|B|C)\\\\] *)?([^\\\\n]*?)(:[\\\\w@%#:]*: *)?$\", 'm'\nexport HL_LEVEL = 1\nexport HL_TODO = 3\nexport HL_PRIORITY = 5\nexport HL_TEXT = 6\nexport HL_TAGS = 7\nexport headlineRE = buildHeadlineRE()\ntodoRE = /^(\\*+) *(TODO|DONE)/\ntagsRE = /:[^:]*/\nexport KW_BOILERPLATE = 1\nexport KW_NAME = 2\nexport KW_INFO = 3\nexport keywordRE = /^(#\\+([^:\\[\\n]+)(?:\\[.*\\] *)?: *)([^\\n]*)$/im\nexport SRC_BOILERPLATE = 1\nSRC_NAME = 2\nexport SRC_INFO = 3\nexport srcStartRE = /^(#\\+(BEGIN_SRC) +)([^\\n]*)$/im\nEND_NAME = 1\nsrcEndRE = /^#\\+(END_SRC)( *)$/im\nexampleStartRE = /^#\\+BEGIN_EXAMPLE *$/im\nexampleEndRE = /^#\\+END_EXAMPLE *$/im\nRES_NAME = 1\nexport resultsRE = /^#\\+(RESULTS)(?: *\\[.*\\] *)?: *$/im\nresultsLineRE = /^([:|] .*)(?:\\n|$)/i\nDRAWER_NAME = 1\nexport drawerRE = /^ *:([^\\n:]*): *$/im\nendRE = /^ *:END: *$/im\nPROPERTY_KEY = 1\nPROPERTY_VALUE = 2\npropertyRE = /^ *:([^\\n:]+): *([^\\n]*)$/img\nLIST_LEVEL = 1\nLIST_BOILERPLATE = 2\nLIST_CHECK = 3\nLIST_CHECK_VALUE = 4\nLIST_INFO = 5\nlistRE = /^( *)(- *)(\\[( |X)\\] +)?(.*)$/m\n# markup characters: * / + = ~ _\n#simpleRE = /\\B(\\*[/+=~\\w](.*?[/+=~\\w])?\\*|\\/[*+=~\\w](.*?[*+=~\\w])?\\/|\\+[*/=~\\w](.*?[*/=~\\w])?\\+|=[+*/~\\w](.*?[+*/~\\w])?=|~[=+*/\\w](.*?[=+*/\\w])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\n#simpleRE = /\\B(\\*[/+=~\\S](.*?[/+=~\\S])?\\*|\\/[*+=~\\S](.*?[*+=~\\S])?\\/|\\+[*/=~\\S](.*?[*/=~\\S])?\\+|=[+*/~\\S](.*?[+*/~\\S])?=|~[=+*/\\S](.*?[=+*/\\S])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\nsimpleRE = /\\B(\\*[^\\s*]([^*]*[^\\s*])?\\*|\\/[^\\s\\/]([^\\/]*[^\\s\\/])?\\/|\\+[^\\s+]([^+]*[^\\s+])?\\+|=[^\\s=]([^=]*[^\\s=])?=|~[^\\s~]([^~]*[^\\s~])?~)(\\B|$)|\\b_[^_]*\\B_(\\b|$)/\nLINK_HEAD = 1\nLINK_INFO = 2\nLINK_DESCRIPTION = 3\nlinkRE = /(\\[\\[([^\\]]*)\\])(?:\\[([^\\]]*)\\])?\\]/\nhtmlStartRE = /^#\\+(BEGIN_HTML\\b)(.*)$/im\nHTML_START_NAME = 1\nHTML_INFO = 2\nhtmlEndRE = /^#\\+END_HTML *$/im\nATTR_NAME = 1\nattrHtmlRE = /^#\\+(ATTR_HTML): *$/im\nattrHtmlLineRE = /^([:|] .*)(?:\\n|$)/i\nimagePathRE = /\\.(png|jpg|jpeg|gif|svg|tiff|bmp)$/i\nleisurePathRE = /^(?:lounge|leisure):([^\\/]*)(?:\\/([^\\/]*)(?:\\/([^\\/]*))?)?$/\nkeywordPropertyRE = /:([^ ]+)/\n\nlast = (a)-> a[a.length - 1]\n\nexport matchLine = (txt)->\n  if txt.match(simpleRE)?.index == 0 then false\n  else\n    checkMatch(txt, exampleStartRE, 'exampleStart') ||\n    checkMatch(txt, exampleEndRE, 'exampleEnd') ||\n    checkMatch(txt, srcStartRE, 'srcStart') ||\n    checkMatch(txt, srcEndRE, 'srcEnd') ||\n    checkMatch(txt, resultsRE, 'results') ||\n    checkMatch(txt, attrHtmlRE, 'attr') ||\n    checkMatch(txt, keywordRE, 'keyword') ||\n    checkMatch(txt, headlineRE, (m)-> \"headline-#{m[HL_LEVEL].trim().length}\") ||\n    checkMatch(txt, listRE, 'list') ||\n    checkMatch(txt, htmlStartRE, 'htmlStart') ||\n    checkMatch(txt, htmlEndRE, 'htmlEnd') ||\n    checkMatch(txt, declRE, 'unknownDecl')\n\ncheckMatch = (txt, pat, result)->\n  m = txt.match pat\n  if m?.index == 0\n    if typeof result == 'string' then result else result m\n  else false\n\nexport class Node\n  constructor: (@text)-> @markup = markupText @text\n  count: -> 1\n  length: -> @text.length\n  end: -> @offset + @text.length\n  toJson: -> JSON.stringify @toJsonObject(), null, '  '\n  toJsonObject: ->\n    obj = @jsonDef()\n    obj.nodeId = @nodeId\n    obj\n  allText: -> @text\n  block: false\n  findNodeAt: (pos)-> if @offset <= pos && pos < @offset + @text.length then this else null\n  scan: (func)-> func this\n  scanWithChildren: (func)->\n    func this\n    for c in @children\n      c.scan func\n  linkNodes: -> this\n  linkChild: (child)->\n    child.linkNodes()\n    child.linkTo this\n  linkChildren: ->\n    prev = null\n    for c in @children\n      if prev then prev.next = c\n      @linkChild c\n      c.prev = prev\n      prev = c\n    this\n  contains: (node)->\n    while node\n      if node == this then return true\n      node = node.fragment ? node.parent\n    false\n  next: null\n  prev: null\n  top: -> if !@parent then this else @parent.top()\n  toString: -> @toJson()\n  allTags: -> @parent?.allTags() ? []\n  allProperties: -> @parent?.allProperties() ? {}\n  linkTo: (@parent)->\n  fixOffsets: (newOff)->\n    @offset = newOff\n    if @children then @fixChildrenOffsets()\n    else newOff + @allText().length\n  fixChildrenOffsets: ->\n    offset = @offset + @text.length\n    for child in @children\n      offset = child.fixOffsets offset\n    offset\n  inNewMeat: -> false\n  getRightmostDescendent: ->\n    child = this\n    while child.children?.length\n      child = child.children[child.children.length - 1]\n    child\n  getLeftmostDescendent: ->\n    child = this\n    while child.children?.length\n      child = child.children[0]\n    child\n  getPrecedingNode: ->\n    if @prev then @prev.getRightmostDescendent()\n    else if parent = @fragment ? @parent\n      if parent.children[0] == this then return parent\n      parent.children[parent.children.indexOf(this) - 1].getRightmostDescendent()\n  getFollowingNode: ->\n    if @next then @next.getLeftmostDescendent()\n    else if parent = @fragment ? @parent\n      if parent.children[parent.children.length - 1] == this then return parent\n      parent.children[parent.children.indexOf(this) + 1].getLeftmostDescendent()\n\nexport class Headline extends Node\n  constructor: (text, @level, @todo, @priority, @tags, @children, @offset)->\n    super(text)\n    @properties = {}\n  count: ->\n    count = 1\n    for node in @children\n      count += node.count()\n    count\n  block: true\n  lowerThan: (l)-> l < @level\n  length: -> @end() - @offset\n  end: ->\n    if @children.length\n      lastChild = @children[@children.length - 1]\n      lastChild.offset + lastChild.length()\n    else super()\n  type: 'headline'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    level: @level\n    todo: @todo\n    priority: @priority\n    tags: @tags\n    children: (c.toJsonObject() for c in @children)\n    properties: @properties\n  allText: -> @text + (c.allText() for c in @children).join ''\n  findNodeAt: (pos)->\n    if pos < @offset  || @offset + @length() < pos then null\n    else if pos < @offset + @text.length then this\n    else\n      # could binary search this\n      for child in @children\n        if res = child.findNodeAt pos then return res\n      null\n  scan: Node.prototype.scanWithChildren\n  linkNodes: -> @linkChildren()\n  addTags: (set)->\n    for tag in parseTags @tags\n      set[tag] = true\n    set\n  addProperties: (props)-> Object.assign props, @properties\n  addAllTags: -> @addTags @parent?.addAllTags() || {}\n  allProperties: -> @addProperties @parent?.allProperties() || {}\n  allTags: -> _.keys @addAllTags()\n  parts: ->\n    m = @text.match headlineRE\n    level: (m[HL_LEVEL] ? '').trim().length\n    stars: m[HL_LEVEL] ? ''\n    todo: m[HL_TODO] ? ''\n    priority: m[HL_PRIORITY] ? ''\n    text: m[HL_TEXT]\n    tags: m[HL_TAGS] ? ''\n  partOffsets: ->\n    m = @text.match headlineRE\n    pos = 0\n    ret = {}\n    addPart = (name, text)->\n      ret[name] = start: pos, end: pos + text.length\n      pos += text.length\n    addPart 'stars', m[HL_LEVEL] ? ''\n    addPart 'todo', m[HL_TODO] ? ''\n    addPart 'priority', m[HL_PRIORITY] ? ''\n    addPart 'text', m[HL_TEXT]\n    addPart 'tags', m[HL_TAGS] ? ''\n    ret\n\nexport class Fragment extends Node\n  constructor: (@offset, @children)-> super('')\n  count: ->\n    count = 1\n    for node in @children\n      count += node.count()\n    count\n  end: ->\n    if @children.length\n      lastChild = @children[@children.length - 1]\n      lastChild.offset + lastChild.length()\n    else super()\n  block: true\n  length: -> @end() - @offset\n  type: 'fragment'\n  jsonDef: ->\n    type: @type\n    offset: @offset\n    children: (c.toJsonObject() for c in @children)\n  allText: -> @text + (c.allText() for c in @children).join ''\n  findNodeAt: (pos)->\n    if pos < @offset  || @offset + @length() < pos then null\n    else if pos < @offset + @text.length then this\n    else\n      # could binary search this\n      for child in @children\n        if res = child.findNodeAt pos then return res\n      null\n  linkNodes: -> @linkChildren()\n  linkChild: (child)->\n    child.fragment = this\n    super child\n  linkTo: (parent)->\n    if @children.length\n      @children[0].prev = @prev\n      @children[@children.length - 1].next = @next\n      for c in @children\n        c.linkTo parent\n\nexport class Meat extends Node\n  constructor: (text, @offset)-> super text\n  lowerThan: (l)-> true\n  type: 'meat'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n  inNewMeat: ->\n    meat = []\n    cur = this\n    while cur && !(cur instanceof Headline || inListItem cur)\n      meat.push cur\n      cur = cur.getPrecedingNode()\n    meat.reverse()\n    t = ''\n    for m in meat\n      t += m.allText()\n    t.match meatStart\n\ninListItem = (org)->\n  org && (org instanceof ListItem || inListItem org.fragment ? org.parent)\n\nmeatStart = /^\\S|\\n\\n\\S/\n\nmarkupTypes =\n  '*': 'bold'\n  '/': 'italic'\n  '_': 'underline'\n  '=': 'verbatim'\n  '~': 'code'\n  '+': 'strikethrough'\n\n#* bold, / italic, _ underline, = verbatim, ~ code, + strikethrough\nexport class SimpleMarkup extends Meat\n  constructor: (text, offset, @children)->\n    super(text, offset)\n    @markupType = markupTypes[@text[0]]\n  count: ->\n    count = 1\n    for node in @children\n      count += node.count()\n    count\n  type: 'simple'\n  linkNodes: -> @linkChildren()\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    markupType: @markupType\n    children: (c.toJsonObject() for c in @children)\n  scan: Node.prototype.scanWithChildren\n\nexport class Link extends Meat\n  constructor: (text, offset, @path, @children)-> super(text, offset)\n  count: ->\n    count = 1\n    for node in @children\n      count += node.count()\n    count\n  type: 'link'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    path: @path\n    children: (c.toJsonObject() for c in @children)\n  scan: Node.prototype.scanWithChildren\n  isImage: -> @path.match imagePathRE\n  isLeisure: -> @path.match leisurePathRE\n  descriptionText: -> (child.allText() for child in @children).join ' '\n\nexport class ListItem extends Meat\n  constructor: (text, offset, @level, @checked, @contentOffset, @children)-> super text, offset\n  count: ->\n    count = 1\n    for node in @children\n      count += node.count()\n    count\n  type: 'list'\n  linkNodes: -> @linkChildren()\n  jsonDef: ->\n    obj =\n      type: @type\n      text: @text\n      level: @level\n      offset: @offset\n      contentOffset: @contentOffset\n      children: child.toJsonObject() for child in @children\n    if @checked? then obj.checked = @checked\n    obj\n  getParent: ->\n    if @level == 0 then null\n    li = this\n    while li = li.getPreviousListItem()\n      if li.level < @level then return li\n  getPreviousListItem: ->\n    parent = @fragment || @parent\n    cur = this\n    while cur = cur.getPrecedingNode()\n      if !(parent.contains cur) || cur.inNewMeat() then return null\n      if (cur.fragment ? cur.parent) == parent && cur instanceof ListItem then return cur\n    null\n  getNextListItem: ->\n    parent = @fragment || @parent\n    cur = this\n    while cur = cur.getFollowingNode()\n      if !(parent.contains cur) || cur.inNewMeat() then return null\n      if (cur.fragment ? cur.parent) == parent && cur instanceof ListItem then return cur\n    null\n  scan: Node.prototype.scanWithChildren\n  inNewMeat: -> true\n\nexport class Drawer extends Meat\n  constructor: (text, offset, @name, @contentPos, @endPos)-> super text, offset\n  type: 'drawer'\n  jsonDef: ->\n    type: @type\n    name: @name\n    text: @text\n    offset: @offset\n    contentPos: @contentPos\n    endPos: @endPos\n  leading: -> @text.substring 0, @contentPos\n  content: -> @text.substring @contentPos, @endPos\n  trailing: -> @text.substring @endPos\n  isProperties: -> @name.toLowerCase() == 'properties'\n  properties: ->\n    props = {}\n    if @isProperties()\n      while m = propertyRE.exec @text.substring @contentPos, @endPos\n        props[m[PROPERTY_KEY]] = (m[PROPERTY_VALUE] ? '').trim()\n    props\n  #name: ->\n  #  n = @leading().trim()\n  #  n.substring 1, n.length - 1\n  linkTo: (node)->\n    super node\n    if @isProperties()\n      if !(node instanceof Headline) && !(node instanceof Fragment) then console.log \"WARNING: Drawer's parent is not a Headline'\"\n      else\n        if !node.properties then node.properties = {}\n        Object.assign node.properties, @properties()\n\nexport class Example extends Meat\n  constructor: (text, offset, @contentPos, @contentLength)-> super(text, offset)\n  block: true\n  type: 'example'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    contentPos: @contentPos\n    contentLength: @contentLength\n  exampleText: -> @text.substring @contentPos, @contentPos + @contentLength\n\nexport class Keyword extends Meat\n  constructor: (text, offset, @name, @info)-> super text, offset\n  block: true\n  type: 'keyword'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    name: @name\n    info: @info\n  attributes: -> parseCodeAttributes @info\n  lead: -> _(@info.split(keywordPropertyRE)).first()\n\nexport parseCodeAttributes = (attrText)->\n  o = _(attrText.split(keywordPropertyRE)).drop(1).map((str)-> str.trim())\n  if o.isEmpty() then null\n  else\n    attr = {}\n    for [k,v] in o.chunk(2).toArray()\n      if attr[k]\n        if !(attr[k] instanceof Array) then attr[k] = [attr[k]]\n        attr[k].push v\n      else attr[k] = v\n    attr\n\nexport class Source extends Keyword\n  constructor: (text, offset, name, info, @infoPos, @content, @contentPos)-> super text, offset, name, info\n  type: 'source'\n  getLanguage: -> @lead()?.trim().toLowerCase()\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    name: @name\n    info: @info\n    infoPos: @infoPos\n    content: @content\n    contentPos: @contentPos\n    contentLength: @content.length\n\nexport class HTML extends Keyword\n  constructor: (text, offset, name, @contentPos, @contentLength, info)-> super text, offset, name, info\n  type: 'html'\n  leading: -> @text.substring 0, @contentPos\n  trailing: -> @text.substring @contentPos + @contentLength\n  content: -> @text.substring @contentPos, @contentPos + @contentLength\n  jsonDef: ->\n    type: @type\n    info: @info || ''\n    text: @text\n    offset: @offset\n    contentPos: @contentPos\n    contentLength: @contentLength\n\nexport class Results extends Keyword\n  constructor: (text, offset, name, @contentPos)-> super text, offset, name\n  type: 'results'\n  content: -> @text.substring @contentPos\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    name: @name\n    contentPos: @contentPos\n\nexport class AttrHtml extends Keyword\n  constructor: (text, offset, name, @contentPos)-> super text, offset, name\n  type: 'attr'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n    name: @name\n    contentPos: @contentPos\n\nexport class UnknownDeclaration extends Meat\n  constructor: (text, offset)-> super(text, offset)\n  type: 'unknown'\n  jsonDef: ->\n    type: @type\n    text: @text\n    offset: @offset\n\nexport nextOrgNode = (node)->\n  up = false\n  while node\n    if node.children && !up && node.children.length then return node.children[0]\n    else if node.next then return node.next\n    else\n      up = true\n      node = node.parent\n  null\n\n#\n# Parse the content of an orgmode file\n#\nexport parseOrgMode = (text, offset, useFragment)->\n  if text instanceof Node then text\n  else\n    [res, rest] = parseHeadline '', offset ? 0, 0, undefined, undefined, undefined, text, text.length\n    if rest.length then throw new Error(\"Text left after parsing: #{rest}\")\n    if useFragment\n      if res.children.length == 1 then res = res.children[0]\n      else if res.children.length > 1 then res = new Fragment res.offset, res.children\n    res.linkNodes()\n\nparseHeadline = (text, offset, level, todo, priority, tags, rest, totalLen)->\n  children = []\n  originalRest = rest\n  while true\n    oldRest = rest\n    [child, rest] = parseOrgChunk rest, originalRest.length - rest.length + offset, level\n    if !child then break\n    if child.lowerThan level\n      while child\n        children.push child\n        child = child.next\n    else rest = oldRest\n  [new Headline(text, level, todo, priority, tags || '', children, offset), rest]\n\nexport parseTags = (text)->\n  tagArray = []\n  for t in (if text then text.split ':' else [])\n    if t then tagArray.push t\n  tagArray\n\nfullLine = (match, text)-> text.substring match.index, match.index + match[0].length + (if text[match.index + match[0].length] == '\\n' then 1 else 0)\n\nparseOrgChunk = (text, offset, level)->\n  if !text then [null, text]\n  else\n    m = text.match headlineRE\n    simple = text.match(simpleRE)?.index == 0\n    if m?.index == 0 && !simple\n      if m[HL_LEVEL].trim().length <= level then [null, text]\n      else\n        line = fullLine m, text\n        parseHeadline line, offset, m[HL_LEVEL].trim().length, m[HL_TODO], m[HL_PRIORITY], m[HL_TAGS], text.substring(line.length), offset + text.length\n    else\n      if m?.index == 0 && simple && (l = text.indexOf '\\n') > -1 && (m = text.substring(l).match headlineRE)\n        meatLen = m.index + l\n      else\n        meatLen = if m && (m.index > 0 || !simple) then m.index else text.length\n      meat = text.substring 0, meatLen\n      parseMeat meat, offset, text.substring(meatLen), false\n\nclass MeatParser\n  constructor: ->\n  checkPat: (pattern, cont)->\n    if !@result && match = @meat.match pattern\n      if match.index == 0\n        line = fullLine match, @meat\n        @result = cont line, @meat.substring(line.length) + @rest, match\n      else @minLen = Math.min @minLen, match.index\n  parse: (meat, offset, rest, singleLine)->\n    @meat = meat\n    @rest = rest\n    @minLen = meat.length + offset\n    @result = null\n    if !@singleLine\n      @checkPat resultsRE, (line, newRest)-> parseResults line, offset, newRest\n      @checkPat attrHtmlRE, (line, newRest)-> parseAttr line, offset, newRest\n      @checkPat srcStartRE, (line, newRest, srcStart)->\n        parseSrcBlock line, offset, srcStart[SRC_INFO], srcStart[SRC_BOILERPLATE].length, newRest\n      @checkPat htmlStartRE, (line, newRest, html)-> parseHtmlBlock line, offset, newRest, html\n      @checkPat keywordRE, (line, newRest, keyword)->\n        parseKeyword keyword, line, offset, keyword[KW_NAME], keyword[KW_INFO], newRest\n      @checkPat listRE, (line, newRest, list)->\n        parseList list, line, offset, list[LIST_LEVEL]?.length ? 0, list[LIST_CHECK_VALUE], list[LIST_INFO], newRest\n      @checkPat exampleStartRE, (line, newRest, start)->\n        if (end = newRest.match declRE) && end[0].match exampleEndRE\n          parseExample line, offset, start, end, newRest\n      @checkPat drawerRE, (line, newRest, drawer)->\n        if end = newRest.match endRE\n          parseDrawer line, drawer[DRAWER_NAME], offset, end, newRest\n      @checkPat declRE, (line, newRest)->\n        parseUnknown line, offset, newRest\n    if @result then @result\n    else\n      @checkPat simpleRE, (line, newRest, simple)->\n        inside = simple[0].substring 1, simple[0].length - 1\n        insideOffset = offset + 1\n        children = []\n        while inside\n          [child, inside] = parseMeat inside, insideOffset, '', true\n          while child\n            children.push child\n            insideOffset = child.offset + child.text.length\n            child = child.next\n        new SimpleMarkup simple[0], offset, children\n      @checkPat linkRE, (line, newRest, link)->\n        inside = link[LINK_DESCRIPTION]\n        insideOffset = offset + link[LINK_HEAD].length\n        children = []\n        while inside\n          [child, inside] = parseMeat inside, insideOffset, '', true\n          while child\n            children.push child\n            insideOffset = child.offset + child.text.length\n            child = child.next\n        new Link link[0], offset, link[LINK_INFO], children\n      if !@result\n        if newline = meat.substring(0, 2) == '\\n\\n' then meatText = meat.substring 2\n        meatText = meat.substring 0, @minLen\n        if m = meatText.match lineBreakPat\n          meatText = meat.substring 0, m.index\n        if newline then meatText = '\\n\\n' + meatText\n        @result = new Meat meatText, offset\n      parseRestOfMeat @result, meat.substring(@result.text.length), rest\n\nlineBreakPat = /\\n\\n/\n\nexport parseMeat = (meat, offset, rest, singleLine)->\n  new MeatParser().parse(meat, offset, rest, singleLine)\n\nparseRestOfMeat = (node, meat, rest)->\n  if meat && node.text[node.text.length - 1] != '\\n'\n    [node2, rest] = parseMeat meat, node.offset + node.allText().length, rest, true\n    node.next = node2\n    [node, rest]\n  else [node, meat + rest]\n\nparseResults = (text, offset, rest)->\n  oldRest = rest\n  while m = rest.match resultsLineRE\n    rest = rest.substring m[0].length\n  if oldRest == rest && rest.length && !(rest[0] in ['#', '\\n'])\n    rest = rest.substring (if m = rest.match /\\n/ then m.index + 1 else rest.length)\n  lines = oldRest.substring 0, oldRest.length - rest.length\n  [new Results(text + lines, offset, text.match(resultsRE)[RES_NAME], text.length), rest]\n\nparseAttr = (text, offset, rest)->\n  oldRest = rest\n  while m = rest.match attrHrmlLineRE\n    rest = rest.substring m[0].length\n  lines = oldRest.substring 0, oldRest.length - rest.length\n  [new AttrHtml(text + lines, offset, text.match(attrHtmlRE)[ATTR_NAME], text.length), rest]\n\nparseDrawer = (text, name, offset, end, rest)->\n  pos = end.index + (fullLine end, rest).length\n  [new Drawer(text + rest.substring(0, pos), offset, name, text.length, text.length + end.index), rest.substring pos]\n\nparseKeyword = (match, text, offset, name, info, rest)->\n  [new Keyword(text, offset, name, text.substring match[KW_BOILERPLATE].length), rest]\n\nparseExample = (startLine, offset, start, end, rest)->\n  lastLine = fullLine end, rest\n  newRest = rest.substring end.index + lastLine.length\n  contentPos = startLine.length\n  contentLength = end.index\n  text = startLine + rest.substring 0, rest.length - newRest.length\n  [new Example(text, offset, contentPos, contentLength), newRest]\n\nparseSrcBlock = (text, offset, info, infoPos, rest)->\n  end = rest.match srcEndRE\n  otherSrcStart = rest.match srcStartRE\n  if !end || (otherSrcStart && otherSrcStart.index < end.index)\n    line = text.match /^.*\\n/\n    if !line then line = [text]\n    [new Meat(line[0]), text.substring(line[0].length) + rest]\n  else\n    endLine = fullLine end, rest\n    [new Source(text + rest.substring(0, end.index + endLine.length), offset, text.match(srcStartRE)[SRC_NAME], info, infoPos, rest.substring(0, end.index), text.length), rest.substring end.index + endLine.length]\n\nparseHtmlBlock = (text, offset, rest, match)->\n  end = rest.match htmlEndRE\n  otherHtmlStart = rest.match htmlStartRE\n  line = text.match /^.*\\n/\n  if !line then line = [text]\n  if !end || (otherHtmlStart && otherHtmlStart.index < end.index)\n    [new Meat(line[0]), text.substring(line[0].length) + rest]\n  else\n    endLine = fullLine end, rest\n    [new HTML(text + rest.substring(0, end.index + endLine.length), offset, match[HTML_START_NAME], line[0].length, text.length + end.index - line[0].length, match[HTML_INFO]), rest.substring end.index + endLine.length]\n\nparseList = (match, text, offset, level, check, info, rest)->\n  contentOffset = listContentOffset match\n  insideOffset = offset + contentOffset\n  inside = text.substring contentOffset\n  children = []\n  while inside\n    [node, inside] = parseMeat inside, insideOffset, '', true\n    while node\n      children.push node\n      insideOffset += node.allText().length\n      node = node.next\n  [new ListItem(text, offset, level, check == 'X' || (if check == ' ' then false else null), contentOffset, children), rest]\n\nparseUnknown = (line, offset, rest)-> [new UnknownDeclaration(line, offset), rest]\n\nlistContentOffset = (match)->\n  match[LIST_LEVEL].length + match[LIST_BOILERPLATE].length + (match[LIST_CHECK]?.length ? 0)\n\nmarkupText = (text)->\n\n  {\n    #parseOrgMode\n    #parseMeat\n    #Node\n    #Headline\n    #Fragment\n    #Meat\n    #Keyword\n    #Source\n    #HTML\n    #Results\n    #resultsRE\n    #ListItem\n    #SimpleMarkup\n    #Link\n    #UnknownDeclaration\n    #Drawer\n    #Example\n    #drawerRE\n    #headlineRE\n    #HL_LEVEL\n    #HL_TODO\n    #HL_PRIORITY\n    #HL_TEXT\n    #HL_TAGS\n    #parseTags\n    #matchLine\n    #keywordRE\n    #KW_BOILERPLATE\n    #KW_NAME\n    #KW_INFO\n    #srcStartRE\n    #SRC_BOILERPLATE\n    #SRC_INFO\n    #nextOrgNode\n    #AttrHtml\n    #parseCodeAttributes\n  }\n"
  ]
}