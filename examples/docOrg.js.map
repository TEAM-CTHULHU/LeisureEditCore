{
  "version": 3,
  "file": "docOrg.js",
  "sourceRoot": "",
  "sources": [
    "docOrg.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "    import {Headline, Source, HTML, Keyword, Drawer, Meat, UnknownDeclaration,\n            Results, parseOrgMode, Fragment} from './org.js'\n    import {Lazy} from './lazy.js'\n\n    _L = Lazy\n\n    {\n      safeLoad\n      load\n      dump\n    } = jsyaml\n\n    export class ParsedCodeBlock\n      constructor: (block)-> if typeof block == 'string' then @setBlockText block else @init block\n      clone: -> new ParsedCodeBlock @block\n      getOrg: -> blockOrg @block\n      toString: -> \"Parsed:\\n  #{@block.text.replace(/\\n/g, '\\n  ')}\"\n      init: (@block)->\n        org = blockOrg @block\n        if org instanceof Fragment || org instanceof Headline then org = org.children[0]\n        @items = getCodeItems org\n      setBlockText: (str)->\n        if (bl = orgDoc parseOrgMode str.replace /\\r\\n/g, '\\n').length != 1 || bl[0].text != str\n          throw new Error \"Bad code block: '#{str}'\"\n        bl[0]._id = @block?._id\n        @init bl[0]\n      spliceItem: (itemName, str)->\n        if str && _.last(str) != '\\n' then str += '\\n'\n        item = @items[itemName]\n        @setBlockText if item then @block.text.substring(0, item.offset) + str + @block.text.substring(item.offset + item.text.length)\n        else @block.text + \"#+#{itemName.toUpperCase()}:\\n#{str}\"\n      setCodeInfo: (info)->\n        {text} = @block\n        {source} = @items\n        infoStart = source.offset + source.infoPos\n        @setBlockText text.substring(0, infoStart) + info + text.substring infoStart + source.info.length\n      setCodeAttribute: (name, value)->\n        info = @items.source.info ? ''\n        @setCodeInfo if @block.codeAttributes?[name.toLowerCase()]?\n          m = info.match new RegExp \"^((|.*\\\\S)(\\\\s*))(:#{escapeRegexp name})((\\\\s+[^:]*)?(?=:|$))\", 'i'\n          prefix = m.index + m[1].length + m[4].length\n          suffix = info.substring prefix + m[5].length\n          if suffix then suffix = ' ' + suffix\n          if !value? then info.substring(0, m.index + m[2].length) + suffix\n          else info.substring(0, prefix) + ' ' + value + suffix\n        else if !value? then info\n        else info + \" :#{name}\" + (if value then ' ' + value else '')\n      setResults: (str)-> @spliceItem 'results', str\n      setSource: (str)-> @spliceItem 'source', str\n      setError: (str)-> @spliceItem 'error', str\n      addResultType: (str)->\n        types = @getResultTypes()\n        if !(str in types)\n          results = @block.codeAttributes?.results\n          @setCodeAttribute 'results', if results then \"#{results} #{str}\" else str\n      removeResultType: (str)->\n        res = @block.codeAttributes?.results\n        types = @getResultTypes()\n        if str.toLowerCase() in types\n          values = res.toLowerCase().split /(\\s+)/\n          start = values.indexOf str.toLowerCase()\n          end = start + 1\n          if start > 0 then start--\n          else if end < values.length then end++\n          prefix = 0\n          for i in [0...start]\n            prefix += values[i].length\n          len = 0\n          for i in [start...end]\n            len += values[i].length\n            values[i] = false\n          @setCodeAttribute 'results', if _.some values\n            res.substring(0, prefix) + res.substring(prefix + len)\n      setResultView: (viewStr)->\n        if viewStr then viewStr = ' ' + viewStr\n        res = @block.codeAttributes?.results\n        newRes = if m = res.match /\\s*\\bview(\\(.*\\)|\\b)/\n          res.substring(0, m.index) + viewStr + res.substring(m.index + m[0].length)\n        else if viewStr then res + viewStr\n        else res\n        @setCodeAttribute 'results', newRes\n      setExports: (code, results)->\n        @setCodeAttribute 'exports', if !code || !results then (code && 'code') || (results && 'results') || 'none'\n      exportsCode: -> @getExports() in ['code', 'both']\n      exportsResults: ->  @getExports() in ['results', 'both']\n      getExports: -> @block.codeAttributes?.exports?.toLowerCase() || 'both'\n      getResultTypes: -> @block.codeAttributes?.results?.toLowerCase().split(' ') ? []\n      setDynamic: (state)->\n        if @isDynamic() != state\n          if state then @addResultType 'dynamic'\n          else @removeResultType 'dynamic'\n      isDynamic: -> 'dynamic' in @getResultTypes()\n      setSourceContent: (newContent)->\n        src = @items.source\n        @setSource \"#{src.text.substring 0, src.contentPos}#{newContent}#{src.text.substring src.contentPos + src.content.length}\"\n      hasExpected: -> @items.expected\n      resultsAreExpected: ->\n        @items.expected && @items.results && @items.expected.content() == @items.results.content()\n      makeResultsExpected: ->\n        if @items.results\n          newExpected = \":expected:\\n#{@items.results.content()}:end:\\n\"\n          item = @items.expected\n          @setBlockText if item then @block.text.substring(0, item.offset) + newExpected + @block.text.substring(item.offset + item.text.length)\n          else\n            source = @items.source\n            @block.text.substring(0, source.offset + source.text.length) + newExpected + @block.text.substring(source.offset + source.text.length)\n      clearExpected: ->\n        if item = @items.expected\n          @setBlockText @block.text.substring(0, item.offset) + @block.text.substring(item.offset + item.text.length)\n\n    escapeRegexp = (str)-> str.replace /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&'\n\n    export blockOrg = (block)->\n      text = if typeof block == 'string' then block else block.text\n      org = parseOrgMode text\n      org = if org.children.length == 1 then org.children[0]\n      else\n        frag = new Fragment org.offset, org.children\n        frag\n      if typeof block == 'object'\n        org.nodeId = block._id\n        org.shared = block.type\n      org.linkNodes()\n      org\n\n    export getCodeItems = (org)->\n      if !getSourceNodeType org then {}\n      else\n        result = {}\n        while !isSourceEnd org\n          if type = getSourceNodeType org\n            if type == 'html'\n              return if result.first then result\n              else source: org, first: org, last: org\n            if !result.first then result.first = org\n            else if type == 'name' then return result\n            if result[type]? then return result\n            result.last = result[type] = org\n            if type == 'name' && org.next.constructor == Meat && org.next.next instanceof Source then result.doc = org.next\n            if type == 'results' then break\n          else if org instanceof Drawer || org instanceof Keyword || org instanceof UnknownDeclaration then break\n          org = org.next\n        if result.source then result else {}\n\n    export isCodeBlock = (org)->\n      if org instanceof Keyword && org.name.match /^name$/i\n        {first} = getCodeItems org\n        first\n      else org instanceof Source\n\n    getSourceNodeType = (org)->\n      if org instanceof Source then 'source'\n      else if org instanceof HTML then 'html'\n      else if org instanceof Results then 'results'\n      else if org instanceof Drawer && org.name.toLowerCase() == 'expected' then 'expected'\n      else if org instanceof Keyword && org.name.match /^name$/i then 'name'\n      else if org instanceof Keyword && org.name.match /^error$/i then 'error'\n      else false\n\n    isSourceEnd = (org)-> !org || org instanceof Headline\n\n    export createDocFromOrg = (org, collection, reloading, filter)->\n      doc = orgDoc org\n      if filter? then doc = _.map doc, filter\n      replaceOrgDoc doc, collection, reloading\n      collection\n\n    export docRoot = (collection)->\n      (collection.leisure ? collection.leisure = {}).info ? (collection.leisure.info = collection.findOne info: true)\n\n    replaceOrgDoc = (docArray, collection, reloading)->\n      if reloading then collection.remove info: ('$exists': false)\n      else collection.remove()\n      linkDocs docArray\n      #console.log \"DOCS: #{JSON.stringify docArray, null, '  '}\"\n      if reloading\n        info = collection.leisure.info\n        info.head = if docArray.length > 0 then docArray[0]._id else null\n        collection.update info._id, info\n      else\n        info = collection.leisure.info =\n          info: true\n          head: if docArray.length > 0 then docArray[0]._id else null\n          _id: new Meteor.Collection.ObjectID().toJSONValue()\n        collection.insert info\n      for doc in docArray\n        collection.insert doc\n\n    export linkDocs = (docs)->\n      prev = null\n      for doc in docs\n        doc._id = new Meteor.Collection.ObjectID().toJSONValue()\n        if prev\n          prev.next = doc._id\n          doc.prev = prev._id\n        prev = doc\n\n    export orgDoc = (org, withProperties)-> createOrgDoc(org, false, withProperties)[0].toArray()\n\n    export lineCodeBlockType = (line)->\n      type = line && root.matchLine line\n      if type in ['srcStart', 'srcEnd', 'htmlStart', 'htmlEnd'] then 'code'\n      else if line.match /^#+name:/i then 'code'\n      else if type == 'headline-1' then 'headline'\n      else 'chunk'\n\n    createOrgDoc = (org, local, withProps)->\n      next = org.next\n      if org instanceof Headline\n        local = local || (org.level == 1 && org.properties.local)\n        children = createChildrenDocs org, local, withProps\n        result = if org.level == 0 then (org.children.length && children) || _L([text: '\\n', type: 'chunk', offset: org.offset])\n        else\n          _L([text: org.text, type: 'headline', level: org.level, offset: org.offset, properties: org.properties]).concat children\n      else if org instanceof HTML then [result, next] = createHtmlBlockDoc org\n      else if isCodeBlock org then [result, next] = createCodeBlockDoc org\n      else\n        block = text: org.allText(), type: 'chunk', offset: org.offset\n        if title = findTitle org then block.title = title\n        result = _L(checkProps org, [block])\n      block = result.last()\n      if withProps && block.type == 'code'\n        block.properties = org.allProperties()\n      if local then result.each (item)-> item.local = true\n      [result, next]\n\n    findTitle = (org)->\n      if org instanceof Keyword && org.name.toLowerCase() == 'title'\n        return org.info.trim()\n      else if org.children\n        for child in org.children when title = findTitle child\n          return title\n\n    checkProps = (org, block)->\n      if org.isProperties?()\n        block.properties = org.properties()\n\n    createChildrenDocs = (org, local, withProps)->\n      children = _L()\n      child = org.children[0]\n      title = null\n      if child\n        mergedText = ''\n        properties = _L()\n        offset = org.children[0].offset\n        while child\n          if newTitle = findTitle child then title = newTitle\n          if isMergeable child\n            mergedText += child.allText()\n            if child.properties?() then properties = properties.merge child.properties?()\n            child = child.next\n          else\n            [mergedText, properties, children] = checkMerged mergedText, properties, children, offset\n            [childDoc, child] = createOrgDoc child, local, withProps\n            if title\n              (if children.isEmpty() then childDoc else children).first().title = title\n              title = null\n            children = children.concat [childDoc]\n            offset = child?.offset\n        [mergedText, properties, children] = checkMerged mergedText, properties, children, offset, title\n      children\n\n    isMergeable = (org)-> !(org instanceof Headline || org instanceof HTML || isCodeBlock org)\n\n    checkMerged = (mergedText, properties, children, offset, title)->\n      if mergedText != ''\n        child = text: mergedText, type: 'chunk', offset: offset\n        if title then child.title = title\n        if !properties.isEmpty() then child.properties = properties.toObject()\n        children = children.concat [child]\n      ['', _L(), children]\n\n    createCodeBlockDoc = (org)->\n      text = ''\n      {first, name, source, last, expected, results} = getCodeItems org\n      if !first then [_L([text: org.allText(), type: 'chunk', offset: org.offset]), org.next]\n      else\n        firstOffset = first.offset\n        while first != last.next\n          text += first.allText()\n          first = first.next\n        obj = text: text, type: 'code', offset: firstOffset\n        if source.attributes()\n          attr = {}\n          for nm, val of source.attributes()\n            attr[nm.toLowerCase()] = val\n        else attr = null\n        obj.codeAttributes = attr\n        obj.codePrelen = source.contentPos + source.offset - firstOffset\n        obj.codePostlen = text.length - obj.codePrelen - source.content.length\n        if expected\n          obj.codeContent = source.content\n          obj.codeTestActual = results.content()\n          obj.codeTestExpected = expected.content()\n          obj.codeTestResult = if !results then 'unknown'\n          else if expected.content() == results.content() then 'pass'\n          else 'fail'\n        if name then obj.codeName = name.info.trim()\n        if obj.codeAttributes?.local? then obj.local = true\n        if l = source.lead() then obj.language = l.trim()\n        if isYamlResult(obj) || isYaml source\n          yamlSrc = (if isYaml(source) && !results then source.content\n          else\n            obj.computedYaml = true\n            results?.content().replace /^: /gm, '')\n          if yamlSrc then obj.yaml = parseYaml yamlSrc\n        else if isText source then obj.yaml = source.content\n        [_L([obj]), last.next]\n\n    export parseYaml = (str)->\n      try\n        #safeLoad str\n        load str\n      catch err\n        undefined\n\n    createHtmlBlockDoc = (org)->\n        text = org.allText()\n        obj = text: text, type: 'code', offset: org.offset\n        obj.codePrelen = org.contentPos\n        obj.codePostlen = text.length - obj.codePrelen - org.contentLength\n        obj.language = 'html'\n        if a = org.attributes() then obj.codeAttributes = a\n        [_L([obj]), org.next]\n\n    export isYaml = (org)-> org instanceof Source && org.info.match /^ *yaml\\b/i\n\n    isYamlResult = (block)-> block.codeAttributes?.results?.match(/\\byaml\\b/) || block.codeAttributes?.post\n\n    export isText = (org)-> org instanceof Source && org.info.match /^ *(text|string)\\b/i\n\n    export checkSingleNode = (text)->\n      docs = {}\n      org = parseOrgMode text\n      [docJson] = if org.children.length > 1 then orgDoc org\n      else orgDoc org.children[0]\n      #if docJson.children? then console.log \"NEW NODE\\n#{JSON.stringify docJson}\"\n      docJson\n\n    export crnl = (data)->\n      if typeof data == 'string' then data.replace /\\r\\n/g, '\\n'\n      else if data.text\n        data.text = crnl data.text\n        data\n      else data\n\n    export blockSource = (block)->\n      block && block.text.substring block.codePrelen, block.text.length - block.codePostlen\n\n    #{\n    #  getCodeItems\n    #  isCodeBlock\n    #  createDocFromOrg\n    #  checkSingleNode\n    #  orgDoc\n    #  docRoot\n    #  linkDocs\n    #  isYaml\n    #  isText\n    #  crnl\n    #  lineCodeBlockType\n    #  blockSource\n    #  ParsedCodeBlock\n    #  blockOrg\n    #  parseYaml\n    #}\n"
  ]
}