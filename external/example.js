// Generated by CoffeeScript 1.9.1
var BasicOptions, EditCore, Fragment, Headline, OrgEditing, Results, SimpleMarkup, Source, blockAttrs, blockLabel, contentSpan, escapeAttr, escapeHtml, last, orgDoc, parseOrgMode, ref, ref1,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = window.Org, parseOrgMode = ref.parseOrgMode, orgDoc = ref.orgDoc, Source = ref.Source, Results = ref.Results, Headline = ref.Headline, SimpleMarkup = ref.SimpleMarkup, Fragment = ref.Fragment;

ref1 = EditCore = window.EditCore, last = ref1.last, BasicOptions = ref1.BasicOptions;

OrgEditing = (function(superClass) {
  extend(OrgEditing, superClass);

  function OrgEditing() {
    OrgEditing.__super__.constructor.call(this);
    this.rerender = {};
  }

  OrgEditing.prototype.moved = function(editor) {
    var blockId, lines, offset, ref2, ref3, ref4, text;
    ref2 = editor.getBlockLocation(), blockId = ref2.blockId, offset = ref2.offset;
    if (blockId) {
      text = this.blocks[blockId].text.substring(0, offset);
      lines = text.split('\n');
      $("#status").html("Block: " + blockId + ", line: " + lines.length + ", col: " + ((ref3 = (ref4 = last(lines)) != null ? ref4.length : void 0) != null ? ref3 : 0));
      return;
    }
    return $("#status").html("No selection");
  };

  OrgEditing.prototype.parseBlocks = function(text) {
    return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
  };

  OrgEditing.prototype.replaceBlocks = function(startId, count, newBlocks) {
    OrgEditing.__super__.replaceBlocks.call(this, startId, count, newBlocks);
    this.findParents();
    return this.findChildren();
  };

  OrgEditing.prototype.edit = function(startId, count, newBlocks) {
    var block, removed;
    removed = this.replaceBlocks(startId, count, newBlocks, true);
    this.editor.node.html(this.renderBlocks());
    return $("#source").html(escapeHtml(((function() {
      var i, len, ref2, results;
      ref2 = this.blockList();
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        block = ref2[i];
        results.push(block.text);
      }
      return results;
    }).call(this)).join('')));
  };

  OrgEditing.prototype.setRemoveRerender = function(id) {
    while (this.removes[id]) {
      id = this.parents[id];
    }
    if (id) {
      return this.rerender[id] = true;
    }
  };

  OrgEditing.prototype.setUpdateRerender = function(newBlock) {
    var np, oldBlock, op;
    oldBlock = this.getOldBlock(newBlock._id);
    if (!oldBlock) {
      return this.rerender[newBlock._id] = true;
    } else {
      np = this.parents[newBlock._id];
      op = this.oldParents[oldBlock._id];
      if (np === op) {
        return this.rerender[newBlock._id] = true;
      } else {
        $("#" + newBlock._id).remove();
        if (np) {
          this.rerender[np] = true;
        } else {
          this.rerender[newBlock._id] = true;
        }
        if (op) {
          return this.rerender[op] = true;
        }
      }
    }
  };

  OrgEditing.prototype.getChangedBlock = function(id) {
    return this.changes.getChangedBlock(id);
  };

  OrgEditing.prototype.getOldBlock = function(id) {
    return this.changes.getOldBlock(id);
  };

  OrgEditing.prototype.findParents = function() {
    var parents;
    parents = this.parents = {};
    return this.findStructure(this.first, function(parent, child) {
      return parents[child._id] = parent != null ? parent._id : void 0;
    });
  };

  OrgEditing.prototype.findChildren = function() {
    var block, children, i, len, ref2;
    children = this.children = {};
    ref2 = this.blockList();
    for (i = 0, len = ref2.length; i < len; i++) {
      block = ref2[i];
      block.previousSibling = block.nextSibling = null;
    }
    return this.findStructure(this.first, (function(_this) {
      return function(parent, child) {
        var childList, parentId, prev, ref3;
        parentId = parent ? parent._id : 'TOP';
        childList = (ref3 = children[parentId]) != null ? ref3 : (children[parentId] = []);
        prev = _this.getBlock(last(childList));
        childList.push(child._id);
        if (prev) {
          child.previousSibling = prev._id;
          return prev.nextSibling = child._id;
        }
      };
    })(this));
  };

  OrgEditing.prototype.findStructure = function(blockId, func, all) {
    var ancestors, block, original, parent, results;
    original = this.blocks[blockId];
    if (original.type === 'headline') {
      ancestors = [];
      results = [];
      while (blockId && (block = this.blocks[blockId])) {
        parent = last(ancestors);
        if (block.type === 'headline') {
          if (!parent || block.level > parent.level) {
            ancestors.push(block);
          } else {
            while (block.level <= parent.level) {
              ancestors.pop();
              parent = last(ancestors);
            }
            ancestors.push(block);
          }
          parent = ancestors.length > 1 ? ancestors[ancestors.length - 2] : void 0;
        }
        func(parent, block);
        results.push(blockId = block.next);
      }
      return results;
    } else {
      return func(null, original);
    }
  };

  OrgEditing.prototype.rerenderBlock = function(block) {
    var html, next, node, prev;
    if (block) {
      html = this.renderBlock(block)[0];
      if ((node = $("#" + block._id)).length) {
        return node.replaceWith(html);
      } else if (block.nextSibling && (next = $("#" + block.nextSibling)).length) {
        return next.before(html);
      } else if (block.previousSibling && (prev = $("#" + block.previousSibling)).length) {
        return prev.after(html);
      } else {
        return $(this.editor.node).append(html);
      }
    }
  };

  OrgEditing.prototype.renderBlock = function(block) {
    var childId, html;
    html = block.type === 'headline' ? "<div " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (contentSpan(block.text, 'text')) + (((function() {
      var i, len, ref2, ref3, results;
      ref3 = (ref2 = this.children[block._id]) != null ? ref2 : [];
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        childId = ref3[i];
        results.push(this.renderBlock(this.blocks[childId])[0]);
      }
      return results;
    }).call(this)).join('')) + "</div>" : "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>";
    return [html, block.nextSibling];
  };

  OrgEditing.prototype.load = function(el, text) {
    var block;
    OrgEditing.__super__.load.call(this, el, text);
    return $("#source").html(escapeHtml(((function() {
      var i, len, ref2, results;
      ref2 = this.blockList();
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        block = ref2[i];
        results.push(block.text);
      }
      return results;
    }).call(this)).join('')));
  };

  return OrgEditing;

})(BasicOptions);

blockLabel = function(block) {
  return "<span class='blockLabel' contenteditable='false'>[" + block.type + "]</span>";
};

blockAttrs = function(block) {
  var extra;
  extra = '';
  if (block.type === 'headline') {
    extra += " data-headline='" + (escapeAttr(block.level)) + "'";
  }
  return "id='" + (escapeAttr(block._id)) + "' data-block='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
};

contentSpan = function(str, type) {
  str = escapeHtml(str);
  if (str) {
    return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
  } else {
    return '';
  }
};

escapeHtml = function(str) {
  if (typeof str === 'string') {
    return str.replace(/[<>&]/g, function(c) {
      return replacements[c];
    });
  } else {
    return str;
  }
};

escapeAttr = function(str) {
  if (typeof str === 'string') {
    return str.replace(/['"&]/g, function(c) {
      switch (c) {
        case '"':
          return '&quot;';
        case "'":
          return '&#39;';
        case '&':
          return '&amp;';
      }
    });
  } else {
    return str;
  }
};

$(document).ready(function() {
  var editor;
  editor = new EditCore($("#editor"), new OrgEditing());
  editor.loadURL("example.lorg");
  return window.ED = editor;
});

//# sourceMappingURL=example.js.map
