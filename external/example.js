// Generated by CoffeeScript 1.9.1
var DataStore, DataStoreEditingOptions, Fragment, Headline, LeisureEditCore, OrgData, OrgEditing, PlainEditing, Results, SimpleMarkup, Source, blockAttrs, blockLabel, blockText, contentSpan, data, escapeAttr, escapeHtml, last, numSpan, orgDoc, orgEditing, parseOrgMode, plainEditing, ref, ref1,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = window.Org, parseOrgMode = ref.parseOrgMode, orgDoc = ref.orgDoc, Source = ref.Source, Results = ref.Results, Headline = ref.Headline, SimpleMarkup = ref.SimpleMarkup, Fragment = ref.Fragment;

ref1 = LeisureEditCore = window.LeisureEditCore, last = ref1.last, DataStore = ref1.DataStore, DataStoreEditingOptions = ref1.DataStoreEditingOptions, blockText = ref1.blockText;

orgEditing = null;

plainEditing = null;

data = null;

OrgData = (function(superClass) {
  extend(OrgData, superClass);

  function OrgData() {
    return OrgData.__super__.constructor.apply(this, arguments);
  }

  OrgData.prototype.makeChange = function(changes) {
    var result;
    result = OrgData.__super__.makeChange.call(this, changes);
    this.findParents();
    this.findChildren();
    return result;
  };

  OrgData.prototype.findParents = function() {
    var parents;
    parents = this.parents = {};
    return this.findStructure(this.first, function(parent, child) {
      return parents[child._id] = parent != null ? parent._id : void 0;
    });
  };

  OrgData.prototype.findChildren = function() {
    var block, children, i, len, ref2;
    children = this.children = {};
    ref2 = this.blockList();
    for (i = 0, len = ref2.length; i < len; i++) {
      block = ref2[i];
      block.previousSibling = block.nextSibling = null;
    }
    return this.findStructure(this.first, (function(_this) {
      return function(parent, child) {
        var childList, parentId, prev, ref3;
        parentId = parent ? parent._id : 'TOP';
        childList = (ref3 = children[parentId]) != null ? ref3 : (children[parentId] = []);
        prev = _this.blocks[last(childList)];
        childList.push(child._id);
        if (prev) {
          child.previousSibling = prev._id;
          return prev.nextSibling = child._id;
        }
      };
    })(this));
  };

  OrgData.prototype.findStructure = function(blockId, func, all) {
    var ancestors, block, original, parent, results;
    original = this.blocks[blockId];
    if (original.type === 'headline') {
      ancestors = [];
      results = [];
      while (blockId && (block = this.getBlock(blockId))) {
        parent = last(ancestors);
        if (block.type === 'headline') {
          if (!parent || block.level > parent.level) {
            ancestors.push(block);
          } else {
            while (block.level <= parent.level) {
              ancestors.pop();
              parent = last(ancestors);
            }
            ancestors.push(block);
          }
          parent = ancestors.length > 1 ? ancestors[ancestors.length - 2] : void 0;
        }
        func(parent, block);
        results.push(blockId = block.next);
      }
      return results;
    } else {
      return func(null, original);
    }
  };

  return OrgData;

})(DataStore);

PlainEditing = (function(superClass) {
  extend(PlainEditing, superClass);

  function PlainEditing() {
    return PlainEditing.__super__.constructor.apply(this, arguments);
  }

  PlainEditing.prototype.parseBlocks = function(text) {
    return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
  };

  PlainEditing.prototype.renderBlock = function(block) {
    return ["<span id='" + block._id + "' data-block>" + (escapeHtml(block.text)) + "</span>", block.next];
  };

  PlainEditing.prototype.setEditor = function(editor1) {
    this.editor = editor1;
    return this.editor.on('moved', (function(_this) {
      return function() {
        var blockId, line, lines, offset, ref2, ref3, ref4, text;
        ref2 = _this.editor.getBlockLocation(), blockId = ref2.blockId, offset = ref2.offset;
        if (blockId) {
          text = blockText(_this.blockList()).substring(0, offset);
          lines = text.split('\n');
          line = lines.length;
          $("#plainStatus").html("Line: " + (numSpan(line)) + " col: " + (numSpan((ref3 = (ref4 = last(lines)) != null ? ref4.length : void 0) != null ? ref3 : 0)));
          return;
        }
        return $("#plainStatus").html("No selection");
      };
    })(this));
  };

  return PlainEditing;

})(DataStoreEditingOptions);

OrgEditing = (function(superClass) {
  extend(OrgEditing, superClass);

  function OrgEditing() {
    return OrgEditing.__super__.constructor.apply(this, arguments);
  }

  OrgEditing.prototype.parseBlocks = function(text) {
    return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
  };

  OrgEditing.prototype.renderBlock = function(block) {
    var childId, html;
    html = block.type === 'headline' ? "<div " + (blockAttrs(block)) + " contenteditable='false'>" + (blockLabel(block)) + "<div contenteditable='true'>" + (contentSpan(block.text, 'text')) + (((function() {
      var i, len, ref2, ref3, results;
      ref3 = (ref2 = this.data.children[block._id]) != null ? ref2 : [];
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        childId = ref3[i];
        results.push(this.renderBlock(this.getBlock(childId))[0]);
      }
      return results;
    }).call(this)).join('')) + "</div></div>" : block.type === 'code' ? "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>" : "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>";
    return [html, block.nextSibling];
  };

  OrgEditing.prototype.setEditor = function(editor1) {
    this.editor = editor1;
    return this.editor.on('moved', (function(_this) {
      return function() {
        var block, blockId, cur, line, lines, offset, ref2, ref3, ref4, text;
        ref2 = _this.editor.getBlockLocation(), blockId = ref2.blockId, offset = ref2.offset;
        if (blockId) {
          block = _this.getBlock(blockId);
          text = block.text.substring(0, offset);
          lines = text.split('\n');
          line = lines.length;
          cur = blockId;
          while (block.prev) {
            block = _this.getBlock(block.prev);
            line += block.text.split('\n').length - 1;
          }
          $("#orgStatus").html("Block: " + blockId + (numSpan('')) + " line: " + (numSpan(line)) + " col: " + (numSpan((ref3 = (ref4 = last(lines)) != null ? ref4.length : void 0) != null ? ref3 : 0)) + " block line: " + (numSpan(lines.length)));
          return;
        }
        return $("#orgStatus").html("No selection");
      };
    })(this));
  };

  return OrgEditing;

})(DataStoreEditingOptions);

numSpan = function(n) {
  return "<span class='status-num'>" + n + "</span>";
};

blockLabel = function(block) {
  return "<span class='blockLabel' contenteditable='false' data-noncontent>[" + block.type + "]</span>";
};

blockAttrs = function(block) {
  var extra;
  extra = '';
  if (block.type === 'headline') {
    extra += " data-headline='" + (escapeAttr(block.level)) + "'";
  }
  return "id='" + (escapeAttr(block._id)) + "' data-block='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
};

contentSpan = function(str, type) {
  str = escapeHtml(str);
  if (str) {
    return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
  } else {
    return '';
  }
};

escapeHtml = function(str) {
  if (typeof str === 'string') {
    return str.replace(/[<>&]/g, function(c) {
      return replacements[c];
    });
  } else {
    return str;
  }
};

escapeAttr = function(str) {
  if (typeof str === 'string') {
    return str.replace(/['"&]/g, function(c) {
      switch (c) {
        case '"':
          return '&quot;';
        case "'":
          return '&#39;';
        case '&':
          return '&amp;';
      }
    });
  } else {
    return str;
  }
};

$(document).ready(function() {
  var editor;
  data = new OrgData();
  editor = new LeisureEditCore($("#orgEditor"), orgEditing = new OrgEditing(data));
  new LeisureEditCore($("#source"), plainEditing = new PlainEditing(data));
  window.ED = editor;
  return setTimeout((function() {
    return editor.loadURL("example.lorg");
  }), 1);
});

//# sourceMappingURL=example.js.map
