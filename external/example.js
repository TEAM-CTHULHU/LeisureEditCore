// Generated by CoffeeScript 1.9.1
var DataStore, DataStoreEditingOptions, Fragment, Headline, LeisureEditCore, OrgData, OrgEditing, PlainEditing, RenderingComputer, Results, SimpleMarkup, Source, blockAttrs, blockLabel, blockText, computeLinks, contentSpan, data, escapeAttr, escapeHtml, getId, last, numSpan, orgDoc, orgEditing, parseOrgMode, plainEditing, ref, ref1,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ref = window.Org, parseOrgMode = ref.parseOrgMode, orgDoc = ref.orgDoc, Source = ref.Source, Results = ref.Results, Headline = ref.Headline, SimpleMarkup = ref.SimpleMarkup, Fragment = ref.Fragment;

ref1 = LeisureEditCore = window.LeisureEditCore, last = ref1.last, DataStore = ref1.DataStore, DataStoreEditingOptions = ref1.DataStoreEditingOptions, blockText = ref1.blockText;

orgEditing = null;

plainEditing = null;

data = null;

OrgData = (function(superClass) {
  extend(OrgData, superClass);

  function OrgData() {
    return OrgData.__super__.constructor.apply(this, arguments);
  }

  OrgData.prototype.parseBlocks = function(text) {
    if (text === '') {
      return [];
    } else {
      return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
    }
  };

  OrgData.prototype.makeChange = function(changes) {
    var result;
    result = OrgData.__super__.makeChange.call(this, changes);
    this.links = computeLinks(this.first, this.blocks);
    return result;
  };

  OrgData.prototype.parent = function(thing) {
    return this.blocks[this.links.parent[getId(thing)]];
  };

  OrgData.prototype.firstChild = function(thing) {
    return this.blocks[this.links.firstChild[getId(thing)]];
  };

  OrgData.prototype.lastChild = function(thing) {
    return this.blocks[this.links.lastChild[getId(thing)]];
  };

  OrgData.prototype.children = function(thing) {
    var c, child;
    c = [];
    child = this.firstChild(thing);
    while (child) {
      c.push(child);
      child = this.nextSibling(child);
    }
    return c;
  };

  OrgData.prototype.nextSibling = function(thing) {
    return this.blocks[this.links.nextSibling[getId(thing)]];
  };

  OrgData.prototype.previousSibling = function(thing) {
    return this.blocks[this.links.previousSibling[getId(thing)]];
  };

  return OrgData;

})(DataStore);

getId = function(thing) {
  if (typeof thing === 'string') {
    return thing;
  } else {
    return thing._id;
  }
};

computeLinks = function(first, blocks, overlay) {
  var cur, curParent, firstChild, getBlock, lastChild, nextSibling, parent, parentStack, previousSibling, siblingStack;
  if (overlay == null) {
    overlay = {};
  }
  getBlock = function(id) {
    var ref2;
    return (ref2 = overlay[id]) != null ? ref2 : blocks[id];
  };
  parent = {};
  firstChild = {};
  lastChild = {};
  nextSibling = {};
  previousSibling = {};
  parentStack = ['TOP'];
  siblingStack = [[]];
  cur = getBlock(first);
  while (cur) {
    curParent = getBlock(last(parentStack));
    if (cur.type === 'headline') {
      while (curParent && cur.level <= curParent.level) {
        lastChild[curParent._id] = last(last(siblingStack))._id;
        parentStack.pop();
        siblingStack.pop();
        curParent = getBlock(last(parentStack));
      }
    }
    parent[cur._id] = last(parentStack);
    if (previousSibling = last(last(siblingStack))) {
      nextSibling[previousSibling] = cur._id;
      previousSibling[cur._id] = previousSibling;
    } else {
      firstChild[last(parentStack)] = cur._id;
    }
    last(siblingStack).push(cur._id);
    if (cur.type === 'headline') {
      parentStack.push(cur._id);
      siblingStack.push([]);
    }
    cur = getBlock(cur.next);
  }
  return {
    parent: parent,
    firstChild: firstChild,
    lastChild: lastChild,
    nextSibling: nextSibling,
    previousSibling: previousSibling
  };
};

PlainEditing = (function(superClass) {
  extend(PlainEditing, superClass);

  function PlainEditing() {
    return PlainEditing.__super__.constructor.apply(this, arguments);
  }

  PlainEditing.prototype.nodeForId = function(id) {
    return $("#plain-" + id);
  };

  PlainEditing.prototype.idForNode = function(node) {
    var ref2;
    return (ref2 = node.id.match(/^plain-(.*)$/)) != null ? ref2[1] : void 0;
  };

  PlainEditing.prototype.parseBlocks = function(text) {
    return this.data.parseBlocks(text);
  };

  PlainEditing.prototype.renderBlock = function(block) {
    return ["<span id='plain-" + block._id + "' data-block>" + (escapeHtml(block.text)) + "</span>", block.next];
  };

  PlainEditing.prototype.setEditor = function(editor1) {
    this.editor = editor1;
    return this.editor.on('moved', (function(_this) {
      return function() {
        var cur, line, lines, offset, ref2, ref3, ref4, startBlock, startOffset, text;
        ref2 = _this.editor.getSelectedBlockRange(), startBlock = ref2.startBlock, startOffset = ref2.startOffset;
        if (startBlock) {
          cur = _this.getBlock(_this.getFirst());
          offset = startOffset;
          while (cur !== startBlock) {
            offset += cur.text.length;
            cur = _this.getBlock(cur.next);
          }
          text = blockText(_this.blockList()).substring(0, offset);
          lines = text.split('\n');
          line = lines.length;
          $("#plainStatus").html("Line: " + (numSpan(line)) + " col: " + (numSpan((ref3 = (ref4 = last(lines)) != null ? ref4.length : void 0) != null ? ref3 : 0)));
          return;
        }
        return $("#plainStatus").html("No selection");
      };
    })(this));
  };

  return PlainEditing;

})(DataStoreEditingOptions);

OrgEditing = (function(superClass) {
  extend(OrgEditing, superClass);

  function OrgEditing() {
    return OrgEditing.__super__.constructor.apply(this, arguments);
  }

  OrgEditing.prototype.changed = function(changes) {
    var block, id, ref2;
    ref2 = changes.adds;
    for (id in ref2) {
      block = ref2[id];
      console.log("add", block);
    }
    for (id in changes.removes) {
      console.log("remove", changes.old[id]);
    }
    for (id in changes.updates) {
      console.log("update", changes.old[id], "->", this.getBlock(id));
    }
    return OrgEditing.__super__.changed.call(this, changes);
  };

  OrgEditing.prototype.nodeForId = function(id) {
    return $("#fancy-" + id);
  };

  OrgEditing.prototype.idForNode = function(node) {
    var ref2;
    return (ref2 = node.id.match(/^fancy-(.*)$/)) != null ? ref2[1] : void 0;
  };

  OrgEditing.prototype.parseBlocks = function(text) {
    return this.data.parseBlocks(text);
  };

  OrgEditing.prototype.renderBlock = function(block) {
    var child, html, ref2;
    html = block.type === 'headline' ? "<div " + (blockAttrs(block)) + " contenteditable='false'>" + (blockLabel(block)) + "<div contenteditable='true'>" + (contentSpan(block.text, 'text')) + (((function() {
      var i, len, ref2, ref3, results;
      ref3 = (ref2 = this.data.children(block)) != null ? ref2 : [];
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        child = ref3[i];
        results.push(this.renderBlock(child)[0]);
      }
      return results;
    }).call(this)).join('')) + "</div></div>" : block.type === 'code' ? "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>" : "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>";
    return [html, ((ref2 = this.data.nextSibling(block)) != null ? ref2._id : void 0) || block.next];
  };

  OrgEditing.prototype.setEditor = function(editor1) {
    this.editor = editor1;
    return this.editor.on('moved', (function(_this) {
      return function() {
        var block, line, lines, ref2, ref3, ref4, startBlock, startOffset, text;
        ref2 = _this.editor.getSelectedBlockRange(), startBlock = ref2.startBlock, startOffset = ref2.startOffset;
        if (startBlock) {
          text = startBlock.text.substring(0, startOffset);
          lines = text.split('\n');
          line = lines.length;
          block = startBlock;
          while (block.prev) {
            block = _this.getBlock(block.prev);
            line += block.text.split('\n').length - 1;
          }
          $("#orgStatus").html("Block: " + startBlock._id + (numSpan('')) + " line: " + (numSpan(line)) + " col: " + (numSpan((ref3 = (ref4 = last(lines)) != null ? ref4.length : void 0) != null ? ref3 : 0)) + " block line: " + (numSpan(lines.length)));
          return;
        }
        return $("#orgStatus").html("No selection");
      };
    })(this));
  };

  return OrgEditing;

})(DataStoreEditingOptions);

RenderingComputer = (function() {
  function RenderingComputer(changes1, options) {
    this.changes = changes1;
    this.options = options;
  }

  RenderingComputer.prototype.renderChanges = function() {};

  RenderingComputer.prototype.promoteChildren = function(headlineId) {};

  return RenderingComputer;

})();

numSpan = function(n) {
  return "<span class='status-num'>" + n + "</span>";
};

blockLabel = function(block) {
  return "<span class='blockLabel' contenteditable='false' data-noncontent>[" + block.type + "]</span>";
};

blockAttrs = function(block) {
  var extra;
  extra = '';
  if (block.type === 'headline') {
    extra += " data-headline='" + (escapeAttr(block.level)) + "'";
  }
  return "id='fancy-" + (escapeAttr(block._id)) + "' data-block='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
};

contentSpan = function(str, type) {
  str = escapeHtml(str);
  if (str) {
    return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
  } else {
    return '';
  }
};

escapeHtml = function(str) {
  if (typeof str === 'string') {
    return str.replace(/[<>&]/g, function(c) {
      return replacements[c];
    });
  } else {
    return str;
  }
};

escapeAttr = function(str) {
  if (typeof str === 'string') {
    return str.replace(/['"&]/g, function(c) {
      switch (c) {
        case '"':
          return '&quot;';
        case "'":
          return '&#39;';
        case '&':
          return '&amp;';
      }
    });
  } else {
    return str;
  }
};

$(document).ready(function() {
  var editor;
  data = new OrgData();
  editor = new LeisureEditCore($("#orgEditor"), orgEditing = new OrgEditing(data));
  new LeisureEditCore($("#source"), plainEditing = new PlainEditing(data));
  window.ED = editor;
  return setTimeout((function() {
    return editor.loadURL("example.lorg");
  }), 1);
});

//# sourceMappingURL=example.js.map
