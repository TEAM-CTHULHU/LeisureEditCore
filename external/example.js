// Generated by CoffeeScript 1.7.1
(function() {
  var DecentEditor, Fragment, Headline, OrgEditing, Results, SimpleMarkup, Source, blockAttrs, blockLabel, contentSpan, escapeAttr, escapeHtml, last, orgDoc, parseOrgMode, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = window.Org, parseOrgMode = _ref.parseOrgMode, orgDoc = _ref.orgDoc, Source = _ref.Source, Results = _ref.Results, Headline = _ref.Headline, SimpleMarkup = _ref.SimpleMarkup, Fragment = _ref.Fragment;

  DecentEditor = window.DecentEditor;

  OrgEditing = (function(_super) {
    __extends(OrgEditing, _super);

    function OrgEditing() {
      this.clearChanges();
    }

    OrgEditing.prototype.idCounter = 0;

    OrgEditing.prototype.newChanges = function() {
      return this;
    };

    OrgEditing.prototype.clearChanges = function() {
      this.updates = null;
      this.removes = null;
      this.oldBlocks = {};
      this.rerender = {};
      this.parents = null;
      return this.newParents = null;
    };

    OrgEditing.prototype.load = function(el, text) {
      var block, blockList, idCounter, prev, _i, _len;
      idCounter = 0;
      blockList = orgDoc(parseOrgMode(text));
      prev = null;
      for (_i = 0, _len = blockList.length; _i < _len; _i++) {
        block = blockList[_i];
        block._id = "block-" + (idCounter++);
        if (prev) {
          block.prev = prev._id;
          prev.next = block._id;
        }
        prev = block;
        this.blocks[block._id] = block;
      }
      this.first = blockList[0]._id;
      this.findChildren();
      return el.html(this.renderBlock(blockList[0]));
    };

    OrgEditing.prototype.isMergable = function(newBlock, oldBlock, neighbor) {
      return newBlock.type === 'chunk' && oldBlock.type !== 'chunk' && (neighbor != null ? neighbor.type : void 0) === 'chunk';
    };

    OrgEditing.prototype.edit = function(func) {
      var block, id, newFirst, oldBlock, p, _ref1, _ref2, _ref3;
      _ref1 = func(), this.updates = _ref1.updates, this.removes = _ref1.removes;
      newFirst = this.blocks[this.first];
      while (this.removes[newFirst._id]) {
        newFirst = newFirst.next && this.blocks[newFirst.next];
      }
      if (newFirst) {
        while (p = this.updates[newFirst._id].prev) {
          newFirst = this.getChangedBlock[p];
        }
      }
      for (id in changes.removes) {
        $("#" + id).remove();
        block = this.getChangedBlock(id, blocks);
        if (block.prev) {
          this.getBlock(block.prev).next = block.next;
        }
        if (block.next) {
          this.getBlock(block.next).prev = block.prev;
        }
        delete this.blocks[id];
      }
      _ref2 = this.updates;
      for (id in _ref2) {
        block = _ref2[id];
        oldBlock = this.oldBlocks[id] = this.blocks[id];
        this.blocks[id] = block;
        block.next = oldBlock.next;
        block.prev = oldBlock.prev;
      }
      this.first = newFirst._id;
      this.oldParents = this.parents;
      this.findParents();
      this.findChildren();
      _ref3 = this.updates;
      for (id in _ref3) {
        block = _ref3[id];
        this.setUpdateRerender(block);
      }
      for (id in this.rerender) {
        this.rerenderBlock(this.blocks[id]);
      }
      return this.clearChanges();
    };

    OrgEditing.prototype.setRemoveRerender = function(id) {
      while (this.removes[id]) {
        id = this.parents[id];
      }
      if (id) {
        return this.rerender[id] = true;
      }
    };

    OrgEditing.prototype.setUpdateRerender = function(newBlock) {
      var np, oldBlock, op;
      oldBlock = this.getOldBlock(newBlock._id);
      if (!oldBlock) {
        return this.rerender[newBlock._id] = true;
      } else if ((np = this.parents[newBlock._id]) !== (op = this.oldParents[oldBlock._id])) {
        return this.setUpdateRerender(this.blocks[np]);
      } else {
        return this.rerender[newBlock._id] = true;
      }
    };

    OrgEditing.prototype.getChangedBlock = function(id) {
      var _ref1;
      return (_ref1 = this.updates[id]) != null ? _ref1 : this.blocks[id];
    };

    OrgEditing.prototype.getOldBlock = function(id) {
      var _ref1;
      return (_ref1 = this.oldBlocks[id]) != null ? _ref1 : this.blocks[id];
    };

    OrgEditing.prototype.findParents = function() {
      var parents;
      parents = this.parents = {};
      return this.findStructure(this.first, function(parent, child) {
        return parents[child._id] = parent != null ? parent._id : void 0;
      });
    };

    OrgEditing.prototype.findChildren = function() {
      var children;
      children = this.children = {};
      return this.findStructure(this.first, function(parent, child) {
        var childList, _ref1;
        if (parent) {
          childList = (_ref1 = children[parent._id]) != null ? _ref1 : (children[parent._id] = []);
          return childList.push(child._id);
        }
      });
    };

    OrgEditing.prototype.findStructure = function(first, func) {
      var ancestors, block, original, parent, _ref1, _results;
      original = this.blocks[first];
      if (original.type === 'headline') {
        ancestors = [];
        _results = [];
        while (first && (block = this.blocks[first])) {
          parent = last(ancestors);
          if (block.type === 'headline') {
            if ((_ref1 = block !== original && block.level <= original.level) != null ? _ref1 : 0) {
              break;
            }
            if (block.level === (parent != null ? parent.level : void 0)) {
              ancestors.pop();
            }
            if (!parent || block.level >= parent.level) {
              ancestors.push(block);
            } else {
              while (block.level < parent.level) {
                ancestors.pop();
                parent = last(ancestors);
              }
              ancestors.push(block);
            }
            parent = ancestors.length > 1 ? ancestors[ancestors.length - 2] : void 0;
          }
          func(parent, block);
          _results.push(first = block.next);
        }
        return _results;
      }
    };

    OrgEditing.prototype.rerenderBlock = function(block) {
      var next, node, prev;
      if ((node = $("#" + block._id)).length) {
        return node.replace(this.renderBlock(block));
      } else if (block.next && (next = $("#" + block.next)).length) {
        return next.before(this.renderBlock(block));
      } else if (block.prev && (prev = $("#" + block.prev)).length) {
        return prev.after(this.renderBlock(block));
      }
    };

    OrgEditing.prototype.renderBlock = function(block) {
      var childId;
      return blockLabel(block) + (block.type === 'headline' ? "<div " + (blockAttrs(block)) + ">" + (contentSpan(block.text, 'text')) + (((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.children[block._id];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          childId = _ref1[_i];
          _results.push(this.renderBlock(this.blocks[childId], null, true));
        }
        return _results;
      }).call(this)).join('')) + "</div>" : "<span " + (blockAttrs(block)) + ">" + (escapeHtml(block.text)) + "</span>");
    };

    return OrgEditing;

  })(DecentEditor.BasicOptions);

  blockLabel = function(block) {
    return "<span class='blockLabel' contenteditable='false' data-noncontent>Block: " + block.type + "</span>";
  };

  blockAttrs = function(block) {
    var extra;
    extra = '';
    if (block.type === 'headline') {
      extra += " data-headline='" + (escapeAttr(block.level)) + "'";
    }
    return "id='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
  };

  contentSpan = function(str, type) {
    str = escapeHtml(str);
    if (str) {
      return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
    } else {
      return '';
    }
  };

  escapeHtml = function(str) {
    if (typeof str === 'string') {
      return str.replace(/[<>&]/g, function(c) {
        return replacements[c];
      });
    } else {
      return str;
    }
  };

  escapeAttr = function(str) {
    if (typeof str === 'string') {
      return str.replace(/['"&]/g, function(c) {
        switch (c) {
          case '"':
            return '&quot;';
          case "'":
            return '&#39;';
          case '&':
            return '&amp;';
        }
      });
    } else {
      return str;
    }
  };

  last = function(array) {
    return array.length && array[array.length - 1];
  };

  $(document).ready(function() {
    var editor;
    editor = new DecentEditor($("#editor"), new OrgEditing());
    editor.loadURL("example.lorg");
    return window.ED = editor;
  });

}).call(this);
