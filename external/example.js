// Generated by CoffeeScript 1.9.1
(function() {
  var DataStore, DataStoreEditingOptions, FancyEditing, Fragment, Headline, LeisureEditCore, OrgData, OrgEditing, PlainEditing, Results, SimpleMarkup, Source, blockAttrs, blockLabel, blockText, checkStructure, contentSpan, copy, data, displayStructure, escapeAttr, escapeHtml, getId, greduce, last, linkAllSiblings, numSpan, orgDoc, orgEditing, parent, parseOrgMode, plainEditing, posFor, ref, ref1, setHtml, siblings,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = window.Org, parseOrgMode = ref.parseOrgMode, orgDoc = ref.orgDoc, Source = ref.Source, Results = ref.Results, Headline = ref.Headline, SimpleMarkup = ref.SimpleMarkup, Fragment = ref.Fragment;

  ref1 = LeisureEditCore = window.LeisureEditCore, last = ref1.last, DataStore = ref1.DataStore, DataStoreEditingOptions = ref1.DataStoreEditingOptions, blockText = ref1.blockText, posFor = ref1.posFor, escapeHtml = ref1.escapeHtml, copy = ref1.copy, setHtml = ref1.setHtml;

  orgEditing = null;

  plainEditing = null;

  data = null;

  OrgData = (function(superClass) {
    extend(OrgData, superClass);

    function OrgData() {
      return OrgData.__super__.constructor.apply(this, arguments);
    }

    OrgData.prototype.getBlock = function(thing) {
      if (typeof thing === 'string') {
        return OrgData.__super__.getBlock.call(this, thing);
      } else {
        return thing;
      }
    };

    OrgData.prototype.load = function(first, blocks) {
      if (first) {
        linkAllSiblings(first, blocks, {
          sets: {},
          old: {}
        });
      }
      return OrgData.__super__.load.call(this, first, blocks);
    };

    OrgData.prototype.parseBlocks = function(text) {
      if (text === '') {
        return [];
      } else {
        return orgDoc(parseOrgMode(text.replace(/\r\n/g, '\n')));
      }
    };

    OrgData.prototype.nextSibling = function(thing) {
      return this.getBlock(this.getBlock(thing).nextSibling);
    };

    OrgData.prototype.previousSibling = function(thing) {
      return this.getBlock(this.getBlock(thing).previousSibling);
    };

    OrgData.prototype.reducePreviousSiblings = function(thing, func, arg) {
      return greduce(this.getBlock(thing), func, arg, (function(_this) {
        return function(b) {
          return _this.getBlock(b.previousSibling);
        };
      })(this));
    };

    OrgData.prototype.reduceNextSiblings = function(thing, func, arg) {
      return greduce(this.getBlock(thing), func, arg, (function(_this) {
        return function(b) {
          return _this.getBlock(b.nextSibling);
        };
      })(this));
    };

    OrgData.prototype.lastSibling = function(thing) {
      return this.reduceNextSiblings(thing, (function(x, y) {
        return y;
      }), null);
    };

    OrgData.prototype.firstSibling = function(thing) {
      return this.reducePreviousSiblings(thing, (function(x, y) {
        return y;
      }), null);
    };

    OrgData.prototype.parent = function(thing) {
      var ref2;
      return this.getBlock((ref2 = this.firstSibling(thing)) != null ? ref2.prev : void 0);
    };

    OrgData.prototype.firstChild = function(thing) {
      var block, n;
      if ((block = this.getBlock(thing)) && (n = this.getBlock(block.next)) && !n.previousSibling) {
        return n;
      }
    };

    OrgData.prototype.lastChild = function(thing) {
      return this.lastSibling(this.firstChild(thing));
    };

    OrgData.prototype.children = function(thing) {
      var c;
      c = [];
      this.reduceNextSiblings(this.firstChild(thing), (function(x, y) {
        return c.push(y);
      }), null);
      return c;
    };

    OrgData.prototype.makeChange = function(changes) {
      changes = OrgData.__super__.makeChange.call(this, changes);
      linkAllSiblings(this.first, this.blocks, changes);
      return changes;
    };

    return OrgData;

  })(DataStore);

  greduce = function(thing, func, arg, next) {
    if (thing && typeof arg === 'undefined') {
      arg = thing;
      thing = next(thing);
    }
    while (thing) {
      arg = func(arg, thing);
      thing = next(thing);
    }
    return arg;
  };

  getId = function(thing) {
    if (typeof thing === 'string') {
      return thing;
    } else {
      return thing._id;
    }
  };

  linkAllSiblings = function(first, blocks, changes) {
    var block, change, cur, curParent, emptyNexts, id, parentStack, prev, previousSibling, results, siblingStack;
    change = function(block) {
      if (!changes.old[block._id]) {
        changes.old[block._id] = copy(block);
      }
      return changes.sets[block._id] = block;
    };
    parentStack = ['TOP'];
    siblingStack = [null];
    emptyNexts = {};
    cur = blocks[first];
    while (cur) {
      if (cur.nextSibling) {
        emptyNexts[cur._id] = cur;
      }
      curParent = blocks[last(parentStack)];
      if (cur.type === 'headline') {
        while (curParent && cur.level <= curParent.level) {
          parentStack.pop();
          siblingStack.pop();
          curParent = blocks[last(parentStack)];
        }
      }
      if (previousSibling = last(siblingStack)) {
        delete emptyNexts[previousSibling];
        if ((prev = blocks[previousSibling]).nextSibling !== cur._id) {
          change(prev).nextSibling = cur._id;
        }
        if (cur.previousSibling !== previousSibling) {
          change(cur).previousSibling = previousSibling;
        }
      } else if (cur.previousSibling) {
        delete change(cur).previousSibling;
      }
      siblingStack[siblingStack.length - 1] = cur._id;
      if (cur.type === 'headline') {
        parentStack.push(cur._id);
        siblingStack.push(null);
      }
      cur = blocks[cur.next];
    }
    results = [];
    for (id in emptyNexts) {
      block = emptyNexts[id];
      results.push(delete change(block).nextSibling);
    }
    return results;
  };

  OrgEditing = (function(superClass) {
    extend(OrgEditing, superClass);

    function OrgEditing(data) {
      OrgEditing.__super__.constructor.call(this, data);
      data.on('load', (function(_this) {
        return function() {
          return setHtml(_this.editor.node[0], _this.renderBlocks());
        };
      })(this));
    }

    OrgEditing.prototype.blockLineFor = function(node, offset) {
      var block, ref2;
      ref2 = this.editor.blockOffset(node, offset), block = ref2.block, offset = ref2.offset;
      return this.blockLine(block, offset);
    };

    OrgEditing.prototype.blockLine = function(block, offset) {
      var lines, text;
      text = block.text.substring(0, offset);
      lines = text.split('\n');
      return {
        line: lines.length,
        col: last(lines).length
      };
    };

    OrgEditing.prototype.lineInfo = function(block, offset) {
      var col, docLine, holder, line, p, ref2, startBlock;
      if (block) {
        ref2 = this.blockLine(block, offset), line = ref2.line, col = ref2.col;
        startBlock = block;
        docLine = line;
        while (block.prev) {
          block = this.getBlock(block.prev);
          docLine += block.text.split('\n').length - 1;
        }
        holder = this.nodeForId(startBlock._id);
        p = posFor(this.editor.domCursorForTextPosition(holder, offset));
        return {
          line: docLine,
          col: col,
          blockLine: line,
          top: Math.round(p.top),
          left: Math.round(p.left)
        };
      } else {
        return {};
      }
    };

    OrgEditing.prototype.setEditor = function(editor1) {
      this.editor = editor1;
      return this.editor.on('moved', (function(_this) {
        return function() {
          var block, blockLine, col, left, line, offset, ref2, ref3, top;
          ref2 = _this.editor.getSelectedBlockRange(), block = ref2.block, offset = ref2.offset;
          if (block) {
            ref3 = _this.lineInfo(block, offset), line = ref3.line, col = ref3.col, blockLine = ref3.blockLine, top = ref3.top, left = ref3.left;
            if (line) {
              return _this.updateStatus("line: " + (numSpan(line)) + " col: " + (numSpan(col)) + " block: " + block._id + ":" + (numSpan(blockLine)) + " top: " + (numSpan(top)) + " left: " + (numSpan(left)));
            }
          }
          return _this.updateStatus("No selection");
        };
      })(this));
    };

    return OrgEditing;

  })(DataStoreEditingOptions);

  parent = function(prev, next) {
    return prev.type === 'headline' && (next.type !== 'headline' || prev.level < next.level);
  };

  siblings = function(prev, next) {
    var ref2;
    return (prev.type !== 'headline' && next.type !== 'headline') || ((prev.type === (ref2 = next.type) && ref2 === 'headline') && prev.level === next.level);
  };

  PlainEditing = (function(superClass) {
    extend(PlainEditing, superClass);

    function PlainEditing() {
      return PlainEditing.__super__.constructor.apply(this, arguments);
    }

    PlainEditing.prototype.nodeForId = function(id) {
      return $("#plain-" + id);
    };

    PlainEditing.prototype.idForNode = function(node) {
      var ref2;
      return (ref2 = node.id.match(/^plain-(.*)$/)) != null ? ref2[1] : void 0;
    };

    PlainEditing.prototype.parseBlocks = function(text) {
      return this.data.parseBlocks(text);
    };

    PlainEditing.prototype.renderBlock = function(block) {
      return ["<span id='plain-" + block._id + "' data-block>" + (escapeHtml(block.text)) + "</span>", block.next];
    };

    PlainEditing.prototype.updateStatus = function(line) {
      return $("#plainStatus").html(line);
    };

    return PlainEditing;

  })(OrgEditing);

  FancyEditing = (function(superClass) {
    extend(FancyEditing, superClass);

    function FancyEditing() {
      return FancyEditing.__super__.constructor.apply(this, arguments);
    }

    FancyEditing.prototype.changed = function(changes) {
      var block, id, j, len, ref2, ref3, ref4, rendered, results;
      rendered = {};
      ref2 = changes.removes;
      for (id in ref2) {
        block = ref2[id];
        this.removeBlock(block);
      }
      ref3 = changes.newBlocks;
      for (j = 0, len = ref3.length; j < len; j++) {
        block = ref3[j];
        rendered[block._id] = true;
        this.updateBlock(block, changes.old[block._id]);
      }
      ref4 = changes.sets;
      results = [];
      for (id in ref4) {
        block = ref4[id];
        if (!rendered[id]) {
          results.push(this.updateBlock(block, changes.old[block._id]));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    FancyEditing.prototype.nodeForId = function(id) {
      return id && $("#fancy-" + (getId(id)));
    };

    FancyEditing.prototype.idForNode = function(node) {
      var ref2;
      return (ref2 = node.id.match(/^fancy-(.*)$/)) != null ? ref2[1] : void 0;
    };

    FancyEditing.prototype.parseBlocks = function(text) {
      return this.data.parseBlocks(text);
    };

    FancyEditing.prototype.removeBlock = function(block) {
      var content, node;
      if ((node = this.nodeForId(block._id)).length) {
        if (block.type === 'headline') {
          content = node.children().filter('[data-content]');
          content.children().filter('[data-block]').insertAfter(node);
        }
        return node.remove();
      }
    };

    FancyEditing.prototype.updateBlock = function(block, old) {
      var child, content, html, j, len, node, ref2, results;
      if ((node = this.nodeForId(block._id)).length) {
        if (block.type !== (old != null ? old.type : void 0) || block.nextSibling !== (old != null ? old.nextSibling : void 0) || block.previousSibling !== (old != null ? old.previousSibling : void 0) || block.prev !== (old != null ? old.prev : void 0)) {
          this.insertUpdateNode(block, node);
        }
        if (block.text !== (old != null ? old.text : void 0)) {
          if (node.is('[data-headline]')) {
            content = node.children().filter('[data-content]');
            content.children().filter('[data-block]').insertAfter(node);
          }
          html = this.renderBlock(block, true)[0];
          node = $(setHtml(node[0], html, true));
          content = node.children().filter('[data-content]');
          if (block.type === 'headline') {
            ref2 = this.data.children(block);
            results = [];
            for (j = 0, len = ref2.length; j < len; j++) {
              child = ref2[j];
              results.push(content.append(this.nodeForId(child._id)));
            }
            return results;
          }
        }
      } else {
        node = $("<div></div>");
        this.insertUpdateNode(block, node);
        html = this.renderBlock(block, true)[0];
        return setHtml(node[0], html, true);
      }
    };

    FancyEditing.prototype.insertUpdateNode = function(block, node) {
      var next, parentNode, prev, ref2, ref3, ref4;
      if ((ref2 = (prev = this.nodeForId(this.data.previousSibling(block)))) != null ? ref2.length : void 0) {
        return prev.after(node);
      } else if (!block.prev) {
        return this.editor.node.prepend(node);
      } else if ((ref3 = (next = this.nodeForId(this.data.nextSibling(block)))) != null ? ref3.length : void 0) {
        return next.before(node);
      } else if ((ref4 = (parentNode = this.nodeForId(block.prev))) != null ? ref4.is("[data-headline]") : void 0) {
        return parentNode.children().filter("[data-content]").append(node);
      } else {
        return this.editor.node.append(node);
      }
    };

    FancyEditing.prototype.renderBlock = function(block, skipChildren) {
      var child, html, ref2;
      html = block.type === 'headline' ? "<div " + (blockAttrs(block)) + " contenteditable='false'>" + (blockLabel(block)) + "<div contenteditable='true' data-content>" + (contentSpan(block.text, 'text')) + (!skipChildren ? ((function() {
        var j, len, ref2, ref3, results;
        ref3 = (ref2 = this.data.children(block)) != null ? ref2 : [];
        results = [];
        for (j = 0, len = ref3.length; j < len; j++) {
          child = ref3[j];
          results.push(this.renderBlock(child)[0]);
        }
        return results;
      }).call(this)).join('') : '') + "</div></div>" : block.type === 'code' ? "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>" : "<span " + (blockAttrs(block)) + ">" + (blockLabel(block)) + (escapeHtml(block.text)) + "</span>";
      return [html, ((ref2 = this.data.nextSibling(block)) != null ? ref2._id : void 0) || !this.data.firstChild(block) && block.next];
    };

    FancyEditing.prototype.updateStatus = function(line) {
      return $("#orgStatus").html(line);
    };

    return FancyEditing;

  })(OrgEditing);

  numSpan = function(n) {
    return "<span class='status-num'>" + n + "</span>";
  };

  blockLabel = function(block) {
    return "<span class='blockLabel' contenteditable='false' data-noncontent>[" + block.type + " " + block._id + "]</span>";
  };

  blockAttrs = function(block) {
    var extra;
    extra = '';
    if (block.type === 'headline') {
      extra += " data-headline='" + (escapeAttr(block.level)) + "'";
    }
    return "id='fancy-" + (escapeAttr(block._id)) + "' data-block='" + (escapeAttr(block._id)) + "' data-type='" + (escapeAttr(block.type)) + "'" + extra;
  };

  contentSpan = function(str, type) {
    str = escapeHtml(str);
    if (str) {
      return "<span" + (type ? " data-org-type='" + (escapeAttr(type)) + "'" : '') + ">" + str + "</span>";
    } else {
      return '';
    }
  };

  escapeAttr = function(str) {
    if (typeof str === 'string') {
      return str.replace(/['"&]/g, function(c) {
        switch (c) {
          case '"':
            return '&quot;';
          case "'":
            return '&#39;';
          case '&':
            return '&amp;';
        }
      });
    } else {
      return str;
    }
  };

  displayStructure = function(data) {
    var bad, check, checks, cur, i, info, level, p, parentStack, prev, prevParent;
    parentStack = [];
    info = "";
    level = 0;
    cur = data.getBlock(data.first);
    prevParent = null;
    checks = {
      nextSibling: {},
      previousSibling: {},
      prev: {}
    };
    check = cur;
    prev = null;
    while (check) {
      checks.nextSibling[check.previousSibling] = check._id;
      checks.previousSibling[check.nextSibling] = check._id;
      checks.prev[check.next] = check._id;
      prev = check;
      check = data.getBlock(check.next);
    }
    while (cur) {
      bad = [];
      if (cur.nextSibling !== checks.nextSibling[cur._id]) {
        bad.push('nextSibling');
      }
      if (cur.previousSibling !== checks.previousSibling[cur._id]) {
        bad.push('previousSibling');
      }
      if (cur.prev !== checks.prev[cur._id]) {
        bad.push('prev');
      }
      if (!cur.previousSibling) {
        p = cur;
        while (p = data.parent(p)) {
          level++;
        }
      }
      info += "" + (((function() {
        var j, ref2, results;
        results = [];
        for (i = j = 0, ref2 = level; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
          results.push('   ');
        }
        return results;
      })()).join('')) + cur._id + (checkStructure(cur, bad)) + ": " + (JSON.stringify(cur.text)) + "\n";
      if (!cur.nextSibling) {
        level = 0;
      }
      cur = data.getBlock(cur.next);
    }
    return $("#blocks").html(info);
  };

  checkStructure = function(block, bad) {
    var err;
    if (bad.length) {
      return ' <span class="err">[' + ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = bad.length; j < len; j++) {
          err = bad[j];
          results.push(err + ": " + block[err]);
        }
        return results;
      })()).join(', ') + ']</span>';
    } else {
      return '';
    }
  };

  $(document).ready(function() {
    var editor;
    window.DATA = data = new OrgData();
    data.on('change', function(changes) {
      return displayStructure(data);
    }).on('load', function() {
      return displayStructure(data);
    });
    window.ED = editor = new LeisureEditCore($("#fancyEditor"), new FancyEditing(data));
    window.ED2 = new LeisureEditCore($("#plainEditor"), new PlainEditing(data));
    return setTimeout((function() {
      return editor.loadURL("example.lorg");
    }), 1);
  });

}).call(this);

//# sourceMappingURL=example.js.map
