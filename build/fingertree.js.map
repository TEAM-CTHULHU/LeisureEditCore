{
  "version": 3,
  "file": "fingertree.js",
  "sourceRoot": "..",
  "sources": [
    "fingertree.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# @fileoverview Implementation of Finger Tree, an immutable general-purpose\n#   data structure which can further be used to implement random-access\n#   sequences, priority-queues, ordered sequences, interval trees, etc.\n#\n#   Based on:\n#   Ralf Hinze and Ross Paterson,\n#   \"Finger trees: a simple general-purpose data structure\",\n#   <http://www.soi.city.ac.uk/~ross/papers/FingerTree.html>\n# @author Xueqiao Xu <xueqiaoxu@gmail.com>\n#\n# Converted to CoffeeScript by Bill Burdick, 2015\n# I converted this for people like me who prefer to read the code, rather\n# than generated docs.  With this in mind, I've condensed the code to make\n# it easier to see more code at a time and removed doc generation-only\n# information (like @inheritDoc comments).  Also, in the name of readability\n# and brevity, I have removed many micro-optimizations (like caching this.*\n# in a variable) because I think most VMs will handle these anyway.  Other\n# than that, I've tried to preserve the original author's intent.\n#\n# MIT License\n#\n# � 2014 Xueqiao Xu <xueqiaoxu@gmail.com>\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without\n# restriction, including without limitation the rights to use, copy,\n# modify, merge, publish, distribute, sublicense, and/or sell copies\n# of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n'use strict'\n\n# Placeholder for methods of interfaces / abstract base classes.\nnotImplemented = -> throw new Error 'Not Implemented'\n\n# A split is a container which has 3 parts, in which the left part is the\n# elements that do not satisfy the predicate, the middle part is the\n# first element that satisfies the predicate and the last part is the rest\n# elements.\nclass Split\n  # @param {Array|FingerTree} left\n  # @param {*} mid\n  # @param {Array|FingerTree} right\n  constructor: (@left, @mid, @right)->\n\n# A digit is a measured container of one to four elements.\n# @constructor\n# @param {Object.<string, function>} measurer\n# @param {Array.<*>} items\nclass Digit\n  constructor: (@measurer, @items)->\n    @length = @items.length\n    m = @measurer.identity()\n    for item in @items\n      m = @measurer.sum m, @measurer.measure item, this\n    # @private\n    @measure_ = m;\n\n  # Get the measure of the digit.\n  measure: -> @measure_\n\n  # Get the first element stored in the digit.\n  peekFirst: -> @items[0]\n\n  # Get the last element stored in the digit.\n  peekLast: -> @items[this.items.length - 1]\n\n  # Return a new digit with the first item removed.\n  # @return {Digit}\n  removeFirst: -> @slice(1)\n\n  # Return a new digit with the first item removed.\n  # @return {Digit}\n  removeLast: -> @slice(0, this.length - 1)\n\n  # Return a new digit with the items sliced.\n  # @param {Number} start\n  # @param {Number} end\n  # @return {Digit}\n  slice: (start, end)->\n    if !end? then end = @length\n    new Digit @measurer, @items.slice start, end\n\n  # Split the digit into 3 parts, in which the left part is the elements\n  # that does not satisfy the predicate, the middle part is the first\n  # element that satisfies the predicate and the last part is the rest\n  # elements.\n  # @param {Function} predicate A function which returns either true or false\n  #   given each stored element.\n  # @param {*} initial The initial measure for the predicate\n  # @return {Split}\n  split: (predicate, initial)->\n    measure = initial\n    i = null\n\n    if @items.length == 1 then new Split [], @items[0], []\n    else\n      for item, i in @items\n        measure = @measurer.sum measure, @measurer.measure(item)\n        if predicate measure then break\n      new Split @items.slice(0, i), item, @items.slice(i + 1)\n\n  # Return the JSON representation of the digit.\n  toJSON: ->\n    type: 'digit'\n    items: @items\n    measure: @measure()\n\n# A node is a measured container of either 2 or 3 sub-finger-trees.\nclass Node\n  # @param {Object.<string, function>} measurer\n  # @param {Array.<FingerTree>} items\n  constructor: (@measurer, @items)->\n    m = @measurer.identity()\n    for item in @items\n      m = @measurer.sum m, @measurer.measure item\n    # @private\n    @measure_ = m\n\n  # Get the measure of the node.\n  measure: -> @measure_\n\n  # Convert the node to a digit.\n  # @return {Digit}\n  toDigit: -> new Digit @measurer, @items\n\n  # Return the JSON representation of the node.\n  toJSON: ->\n    type: 'node'\n    items: @items\n    measure: @measure()\n\n# Interface of finger-tree.\n# @interface\nexport class FingerTree\n  # Get the measure of the tree.\n  @measure: notImplemented\n\n  # Force on a normal FingerTree just returns this\n  force: -> this\n\n  # Check whether the tree is empty.\n  # @return {boolean} True if the tree is empty.\n  isEmpty: notImplemented\n\n  # Return a new tree with an element added to the front.\n  # @param {*} v The element to add.\n  # @return {FingerTree}\n  addFirst: notImplemented\n\n  # Return a new tree with an element added to the end.\n  # @param {*} v The element to add.\n  # @return {FingerTree} A new finger-tree with the element added.\n  addLast: notImplemented\n\n  # Return a new tree with the first element removed.\n  # @return {FingerTree}\n  removeFirst: notImplemented\n\n  # Return a new tree with the last element removed.\n  # @return {FingerTree}\n  removeLast: notImplemented\n\n  # Get the first element of the tree.\n  # @return {*}\n  peekFirst: notImplemented\n\n  # Get the last element of the tree.\n  # @return {*}\n  peekLast: notImplemented\n\n  # Concatenate this tree with another tree.\n  # @param {FingerTree} other\n  # @return {FingerTree} The concatenated tree.\n  concat: notImplemented\n\n  # Split the tree into two halves, where the first half is a finger-tree\n  # which contains all the elements that satisfy the given predicate,\n  # while the ones from the other half do not.\n  # @param {function(*): boolean} predicate\n  # @return {Array.<FingerTree>} An array with the first element being a\n  #   finger-tree that contains all the satisfying elements and the second\n  #   element being a finger-tree that contains all the other elements.\n  split: notImplemented\n\n  # Take elements from the tree until the predicate returns true.\n  # @param {function(*): boolean} predicate\n  # @return {FingerTree}\n  takeUntil: (predicate)-> @split(predicate)[0]\n\n  # Drop elements from the tree until the predicate returns true.\n  # @param {function(*): boolean} predicate\n  # @return {FingerTree}\n  dropUntil: (predicate)-> @split(predicate)[1]\n\n  # @return the JSON representation of the tree.\n  toJSON: notImplemented\n\n  # iterate over the nodes\n  each: (func)->\n    t = this\n    while !t.isEmpty()\n      func t.peekFirst()\n      t = t.removeFirst()\n\n  # iterate over the nodes\n  eachReverse: (func)->\n    t = this\n    while !t.isEmpty()\n      func t.peekLast()\n      t = t.removeLast()\n\n  toArray: ->\n    a = []\n    @each (n)-> a.push n\n    a\n\n# An empty finger-tree.\nclass Empty extends FingerTree\n  constructor: (@measurer)->\n    super()\n    @measure_ = @measurer.identity()\n  measure: -> @measure_\n  addFirst: (v)-> new Single @measurer, v\n  addLast: (v)-> new Single @measurer, v\n  peekFirst: -> null\n  peekLast: -> null\n  isEmpty: -> true\n  concat: (other)-> other\n  split: (predicate)-> [this, this]\n  toJSON: ->\n    type: 'empty'\n    measure: @measure()\n\n# A finger-tree which contains exactly one element.\nclass Single extends FingerTree\n  # @param {Object.<string, function>} measurer\n  # @param {*} value\n  constructor: (@measurer, @value)->\n    super()\n    @measure_ = @measurer.measure(@value)\n\n  measure: -> @measure_\n\n  addFirst: (v)->\n    new Deep @measurer,\n      new Digit(@measurer, [v]),\n      new Empty(makeNodeMeasurer @measurer),\n      new Digit(@measurer, [@value])\n\n  addLast: (v)->\n    new Deep @measurer,\n      new Digit(@measurer, [@value]),\n      new Empty(makeNodeMeasurer @measurer),\n      new Digit(@measurer, [v])\n\n  removeFirst:-> new Empty @measurer\n\n  removeLast: -> new Empty @measurer\n\n  peekFirst: -> @value\n\n  peekLast: -> @value\n\n  isEmpty: -> false\n\n  concat: (other)-> other.addFirst @value\n\n  # Helper function to split the tree into 3 parts.\n  # @private\n  # @param {function(*): boolean} predicate\n  # @param {*} initial The initial measurement for reducing\n  # @return {Split}\n  splitTree: (predicate, initial)->\n    new Split new Empty(@measurer),\n      @value,\n      new Empty(@measurer)\n\n  split: (predicate)->\n    if predicate @measure() then [new Empty(@measurer), this]\n    else [this, new Empty @measurer]\n\n  toJSON: ->\n    type: 'single'\n    value: @value\n    measure: @measure()\n\n# A finger-tree which contains two or more elements.\nclass Deep extends FingerTree\n  # @param {Object.<string, function>} measurer\n  # @param {Digit} left\n  # @param {FingerTree} mid\n  # @param {Digit} right\n  constructor: (@measurer, @left, @mid, @right)->\n    # @private\n    super()\n    @measure_ = null\n\n  measure: ->\n    if @measure_ == null\n      @measure_ = @measurer.sum(\n        @measurer.sum(@left.measure(), @mid.measure()),\n        @right.measure())\n    @measure_\n\n  addFirst: (v)->\n    leftItems = @left.items\n    if @left.length == 4 then new Deep @measurer,\n      new Digit(@measurer, [v, leftItems[0]]),\n      @mid.addFirst(new Node(@measurer,\n        [leftItems[1],\n         leftItems[2],\n         leftItems[3]])),\n      @right\n    else new Deep @measurer,\n      new Digit(@measurer, [v].concat(leftItems)),\n      @mid,\n      @right\n\n  addLast: (v)->\n    rightItems = @right.items\n    if @right.length == 4 then new Deep @measurer,\n      @left,\n      @mid.addLast(new Node(@measurer,\n        [rightItems[0],\n         rightItems[1],\n         rightItems[2]])),\n      new Digit(@measurer, [rightItems[3], v])\n    else new Deep @measurer,\n      @left,\n      @mid,\n      new Digit(@measurer, rightItems.concat([v]))\n\n  removeFirst: ->\n    if @left.length > 1\n      new Deep @measurer, @left.removeFirst(), @mid, @right\n    else if !@mid.isEmpty()\n      newMid = new DelayedFingerTree => @mid.removeFirst()\n      new Deep @measurer, @mid.peekFirst().toDigit(), newMid, @right\n    else if @right.length == 1 then new Single @measurer, @right.items[0]\n    else new Deep @measurer, @right.slice(0, 1), @mid, @right.slice(1)\n\n  removeLast: ->\n    if @right.length > 1\n      new Deep @measurer, @left, @mid, @right.removeLast()\n    else if !@mid.isEmpty()\n      newMid = new DelayedFingerTree => @mid.removeLast()\n      new Deep @measurer, @left, newMid, @mid.peekLast().toDigit()\n    else if @left.length == 1 then new Single @measurer, @left.items[0]\n    else new Deep @measurer, @left.slice(0, -1), @mid, @left.slice(-1)\n\n  peekFirst: -> @left.peekFirst()\n\n  peekLast: -> @right.peekLast()\n\n  isEmpty: -> false\n\n  concat: (other)->\n    other = other.force()\n    if other instanceof Empty then this\n    else if other instanceof Single then @addLast(other.value)\n    else app3 this, [], other\n\n  # Helper function to split the tree into 3 parts.\n  # @private\n  # @param {function(*): boolean} predicate\n  # @param {*} initial The initial measurement for reducing\n  # @return {Split}\n  splitTree: (predicate, initial)->\n    # see if the split point is inside the left tree\n    leftMeasure = @measurer.sum initial, @left.measure()\n    if predicate leftMeasure\n      split = @left.split predicate, initial\n      new Split fromArray(split.left, @measurer),\n        split.mid,\n        deepLeft(@measurer, split.right, @mid, @right)\n    else\n      # see if the split point is inside the mid tree\n      midMeasure = @measurer.sum leftMeasure, @mid.measure()\n      if predicate midMeasure\n        midSplit = @mid.splitTree predicate, leftMeasure\n        split = midSplit.mid.toDigit().split predicate, @measurer.sum(leftMeasure, midSplit.left.measure())\n        new Split deepRight(@measurer, @left, midSplit.left, split.left),\n          split.mid,\n          deepLeft(@measurer, split.right, midSplit.right, @right)\n      else\n        # the split point is in the right tree\n        split = @right.split predicate, midMeasure\n        new Split deepRight(@measurer, @left, @mid, split.left),\n          split.mid,\n          fromArray(split.right, @measurer)\n\n  split: (predicate)->\n    if predicate @measure()\n      split = @splitTree predicate, @measurer.identity()\n      [split.left, split.right.addFirst split.mid]\n    else [this, new Empty @measurer]\n\n  toJSON: ->\n    type: 'deep',\n    left: @left\n    mid: @mid\n    right: @right\n    measure: @measure()\n\n# A lazy-evaluted finger-tree.\nclass DelayedFingerTree\n  # @param {function(): FingerTree} thunk A function, which when called, will\n  constructor: (@thunk)-> @tree = null\n  # Evaluate the thunk and return the finger-tree.\n  # @return {FingerTree}\n  force: ->\n    if @tree == null then @tree = this.thunk()\n    @tree\n  isEmpty: (v)-> @force().isEmpty()\n  measure: -> @force().measure()\n  peekFirst: -> @force().peekFirst()\n  peekLast: -> @force().peekLast()\n  addFirst: (v)-> @force().addFirst(v)\n  addLast: (v)-> @force().addLast(v)\n  removeFirst: -> @force().removeFirst()\n  removeLast: -> @force().removeLast()\n  concat: (other)-> @force().concat other\n  splitTree: (predicate, initial)-> @force().splitTree(predicate, initial)\n  split: (predicate)-> @force().split(predicate)\n  takeUntil: (predicate)-> @force().takeUntil other\n  dropUntil: (predicate)-> @force().dropUntil other\n  toJSON: -> @force().toJSON()\n  toArray: -> @force().toArray()\n\n# @param {Array} left\n# @param {FingerTree} mid\n# @param {Digit} right\ndeepLeft = (measurer, left, mid, right)->\n  if !left.length\n    if mid.isEmpty() then fromArray right.items, measurer\n    else new DelayedFingerTree -> new Deep measurer,\n       mid.peekFirst().toDigit(),\n       mid.removeFirst(),\n       right\n  else new Deep measurer, new Digit(measurer, left), mid, right\n\n# @param {Digit} left\n# @param {FingerTree} mid\n# @param {Array} right\ndeepRight = (measurer, left, mid, right)->\n  if !right.length\n    if mid.isEmpty() then fromArray left.items, measurer\n    else new DelayedFingerTree -> new Deep measurer,\n       left,\n       mid.removeLast(),\n       mid.peekLast().toDigit()\n  else new Deep measurer, left, mid, new Digit measurer, right\n\n# Helper function to concatenate two finger-trees with additional elements\n# in between.\n# @param {FingerTree} t1 Left finger-tree\n# @param {Array} ts An array of elements in between the two finger-trees\n# @param {FingerTree} t2 Right finger-tree\n# @return {FingerTree}\napp3 = (t1, ts, t2)->\n  t1 = t1.force()\n  t2 = t2.force()\n  if t1 instanceof Empty then prepend t2, ts\n  else if t2 instanceof Empty then append t1, ts\n  else if t1 instanceof Single then prepend(t2, ts).addFirst t1.value\n  else if t2 instanceof Single then append(t1, ts).addLast t2.value\n  else new Deep t1.measurer,\n    t1.left,\n    new DelayedFingerTree(-> app3 t1.mid,\n      nodes(t1.measurer,\n        t1.right.items\n          .concat(ts)\n          .concat(t2.left.items)),\n      t2.mid),\n    t2.right\n\n# Helper function to group an array of elements into an array of nodes.\n# @param {Object.<string, function>} m Measurer\n# @param {Array} xs\n# @return {Array}\nnodes = (m, xs, res)->\n  res = res ? []\n  switch xs.length\n    when 2 then res.push new Node(m, xs)\n    when 3 then res.push new Node(m, xs)\n    when 4 then res.push new Node(m, [xs[0], xs[1]]), new Node(m, [xs[2], xs[3]])\n    else\n      res.push new Node m, [xs[0], xs[1], xs[2]]\n      nodes m, xs.slice(3), res\n  res\n\n# Construct a derived measurer which will return the memoized\n# measurement of a node instead of evaluting the node.\n# @param {Object.<string, function>} measurer\n# @return {Object.<string, function>}\nmakeNodeMeasurer = (measurer)->\n  identity: measurer.identity\n  measure: (n)-> n.measure()\n  sum: measurer.sum\n\n# Prepend an array of elements to the left of a tree.\n# Returns a new tree with the original one unmodified.\n# @param {FingerTree} tree\n# @param {Array} xs\n# @return {FingerTree}\nprepend = (tree, xs)->\n  for i in [xs.length - 1 .. 0] by -1\n    tree = tree.addFirst(xs[i])\n  tree\n\n# Append an array of elements to the right of a tree.\n# Returns a new tree with the original one unmodified.\n# @param {FingerTree} tree\n# @param {Array} xs\n# @return {FingerTree}\nappend = (tree, xs)->\n  for x in xs\n    tree = tree.addLast x\n  tree\n\n# Construct a fingertree from an array.\n# @param {Array} xs An array of elements.\n# @param {Object.<string, function>} measurer\n# @return {FingerTree}\nfromArray = (xs, measurer)->\n  measurer = measurer ||\n    identity: -> 0\n    measure: (v)-> 1\n    sum: (a, b)-> a + b\n  prepend new Empty(measurer), xs\n\nFingerTree.fromArray = fromArray\n"
  ]
}